
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODleftEQUALNEQUALLTELTGTGTEleftANDORAND ARRAY ASSIGNMENT BOOL COLON COMMA COMMENTBEGIN COMMENTEND DIV ELSE EQUAL FLOAT GT GTE IDENTIFIER IF INTEGER LBRACKET LBRACKET_S LPAREN LT LTE MINUS MOD NEQUAL NOT OR PLUS RBRACKET RBRACKET_S RETURN RPAREN SEMICOLON STRING TARRAY TBOOL TFLOAT TIMES TINTEGER TSTRING TVOID VOID WHILE definition_sequence : definition definition_sequence\n\t| definition  definition : function_declaration\n\t| variable_declaration  variable_declaration : identifier COLON type SEMICOLON\n\t| identifier COLON type ASSIGNMENT element SEMICOLON  function_declaration : function_heading body \n\t| identifier COLON type LPAREN parameter_list RPAREN SEMICOLON  function_heading : identifier COLON type LPAREN parameter_list RPAREN  parameter_list : parameter COMMA parameter_list\n\t| parameter  parameter : identifier COLON type  statement_part : LBRACKET statement_sequence RBRACKET  statement_sequence : statement statement_sequence\n\t| statement  statement : statement_part\n\t | assignment_statement\n\t | if_statement\n\t | while_statement\n\t | return_statement\n\t | procedure_or_function_call\n\t | array\n\t |  body : statement  procedure_or_function_call : identifier LPAREN param_list RPAREN SEMICOLON\n\t| identifier LPAREN RPAREN SEMICOLON  param_list : param_list COMMA param\n\t | param  param : expression  assignment_statement : identifier COLON type ASSIGNMENT element SEMICOLON  if_statement : IF expression body ELSE body\n\t| IF expression body  while_statement : WHILE expression body  return_statement : RETURN element SEMICOLON  expression : expression_m\n\t| expression and_or expression_m  expression_m : expression_s\n\t| expression_m sign expression_s  expression_s : element \n\t| expression_s psign element  and_or : AND\n\t| OR  psign : TIMES \n\t| DIV  sign : PLUS\n\t| MINUS\n\t| MOD\n\t| EQUAL\n\t| NEQUAL\n\t| LT\n\t| LTE\n\t| GT\n\t| GTE  element : identifier\n\t| integer\n\t| float\n\t| string\n\t| bool\n\t| LPAREN expression RPAREN \n\t| NOT element  identifier : IDENTIFIER  integer : INTEGER  float : FLOAT  string : STRING  bool : BOOL  array : identifier LBRACKET_S integer RBRACKET_S SEMICOLON  type : TINTEGER\n\t| TFLOAT\n\t| TSTRING \n\t| TBOOL \n\t| TARRAY '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,20,21,22,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,52,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,86,87,89,90,91,92,93,99,101,102,104,105,106,107,109,],[7,7,-3,-4,7,-61,-7,-24,-16,-17,-18,-19,-20,-21,-22,7,7,7,7,7,7,7,-35,-37,-39,-54,-55,-56,-57,-58,7,7,-62,-63,-64,-65,7,-13,-32,7,-41,-42,7,-45,-46,-47,-48,-49,-50,-51,-52,-53,7,-43,-44,-60,-33,-34,7,-5,7,7,7,-26,7,-36,-38,-40,-59,-25,-66,-31,-9,7,-6,-30,-8,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,60,78,79,80,82,87,89,90,91,92,93,99,101,102,104,106,107,109,],[0,-2,-3,-4,-23,-61,-1,-7,-24,-16,-17,-18,-19,-20,-21,-22,-23,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-23,-13,-32,-60,-33,-34,-5,-26,-23,-36,-38,-40,-59,-25,-66,-31,-9,-6,-30,-8,]),'LBRACKET':([5,7,10,11,12,13,14,15,16,17,18,25,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,60,78,79,80,87,89,90,91,92,93,99,101,102,104,107,],[18,-61,-24,-16,-17,-18,-19,-20,-21,-22,18,18,18,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,18,-13,-32,-60,-33,-34,-26,18,-36,-38,-40,-59,-25,-66,-31,-9,-30,]),'IF':([5,7,10,11,12,13,14,15,16,17,18,25,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,60,78,79,80,87,89,90,91,92,93,99,101,102,104,107,],[20,-61,-24,-16,-17,-18,-19,-20,-21,-22,20,20,20,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,20,-13,-32,-60,-33,-34,-26,20,-36,-38,-40,-59,-25,-66,-31,-9,-30,]),'WHILE':([5,7,10,11,12,13,14,15,16,17,18,25,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,60,78,79,80,87,89,90,91,92,93,99,101,102,104,107,],[21,-61,-24,-16,-17,-18,-19,-20,-21,-22,21,21,21,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,21,-13,-32,-60,-33,-34,-26,21,-36,-38,-40,-59,-25,-66,-31,-9,-30,]),'RETURN':([5,7,10,11,12,13,14,15,16,17,18,25,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,60,78,79,80,87,89,90,91,92,93,99,101,102,104,107,],[22,-61,-24,-16,-17,-18,-19,-20,-21,-22,22,22,22,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,22,-13,-32,-60,-33,-34,-26,22,-36,-38,-40,-59,-25,-66,-31,-9,-30,]),'COLON':([6,7,19,94,],[23,-61,26,103,]),'LPAREN':([7,19,20,21,22,27,38,39,46,47,48,49,50,51,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,84,86,],[-61,27,38,38,38,38,38,38,81,-67,-68,-69,-70,-71,38,-41,-42,38,-45,-46,-47,-48,-49,-50,-51,-52,-53,38,-43,-44,38,38,38,]),'LBRACKET_S':([7,19,],[-61,28,]),'TIMES':([7,31,32,33,34,35,36,37,40,41,42,43,78,91,92,93,],[-61,75,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,75,-40,-59,]),'DIV':([7,31,32,33,34,35,36,37,40,41,42,43,78,91,92,93,],[-61,76,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,76,-40,-59,]),'PLUS':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,65,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,65,-38,-40,-59,]),'MINUS':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,66,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,66,-38,-40,-59,]),'MOD':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,67,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,67,-38,-40,-59,]),'EQUAL':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,68,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,68,-38,-40,-59,]),'NEQUAL':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,69,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,69,-38,-40,-59,]),'LT':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,70,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,70,-38,-40,-59,]),'LTE':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,71,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,71,-38,-40,-59,]),'GT':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,72,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,72,-38,-40,-59,]),'GTE':([7,30,31,32,33,34,35,36,37,40,41,42,43,78,90,91,92,93,],[-61,73,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-60,73,-38,-40,-59,]),'AND':([7,29,30,31,32,33,34,35,36,37,40,41,42,43,44,58,77,78,90,91,92,93,],[-61,62,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,62,62,62,-60,-36,-38,-40,-59,]),'OR':([7,29,30,31,32,33,34,35,36,37,40,41,42,43,44,58,77,78,90,91,92,93,],[-61,63,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,63,63,63,-60,-36,-38,-40,-59,]),'ELSE':([7,10,11,12,13,14,15,16,17,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,60,78,79,80,87,89,90,91,92,93,99,101,102,107,],[-61,-24,-16,-17,-18,-19,-20,-21,-22,-23,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-23,-13,89,-60,-33,-34,-26,-23,-36,-38,-40,-59,-25,-66,-31,-30,]),'RBRACKET':([7,10,11,12,13,14,15,16,17,18,24,25,29,30,31,32,33,34,35,36,37,40,41,42,43,44,52,53,60,78,79,80,87,89,90,91,92,93,99,101,102,107,],[-61,-24,-16,-17,-18,-19,-20,-21,-22,-23,52,-15,-23,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-23,-13,-14,-32,-60,-33,-34,-26,-23,-36,-38,-40,-59,-25,-66,-31,-30,]),'SEMICOLON':([7,33,34,35,36,37,40,41,42,43,45,46,47,48,49,50,51,56,78,85,88,93,97,98,104,],[-61,-54,-55,-56,-57,-58,-62,-63,-64,-65,80,82,-67,-68,-69,-70,-71,87,-60,99,101,-59,106,107,109,]),'RPAREN':([7,27,30,31,32,33,34,35,36,37,40,41,42,43,47,48,49,50,51,55,57,58,77,78,90,91,92,93,95,96,100,108,110,],[-61,56,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-67,-68,-69,-70,-71,85,-28,-29,93,-60,-36,-38,-40,-59,104,-11,-27,-12,-10,]),'COMMA':([7,30,31,32,33,34,35,36,37,40,41,42,43,47,48,49,50,51,55,57,58,78,90,91,92,93,96,100,108,],[-61,-35,-37,-39,-54,-55,-56,-57,-58,-62,-63,-64,-65,-67,-68,-69,-70,-71,86,-28,-29,-60,-36,-38,-40,-59,105,-27,-12,]),'NOT':([20,21,22,27,38,39,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,84,86,],[39,39,39,39,39,39,39,-41,-42,39,-45,-46,-47,-48,-49,-50,-51,-52,-53,39,-43,-44,39,39,39,]),'INTEGER':([20,21,22,27,28,38,39,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,84,86,],[40,40,40,40,40,40,40,40,-41,-42,40,-45,-46,-47,-48,-49,-50,-51,-52,-53,40,-43,-44,40,40,40,]),'FLOAT':([20,21,22,27,38,39,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,84,86,],[41,41,41,41,41,41,41,-41,-42,41,-45,-46,-47,-48,-49,-50,-51,-52,-53,41,-43,-44,41,41,41,]),'STRING':([20,21,22,27,38,39,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,84,86,],[42,42,42,42,42,42,42,-41,-42,42,-45,-46,-47,-48,-49,-50,-51,-52,-53,42,-43,-44,42,42,42,]),'BOOL':([20,21,22,27,38,39,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,83,84,86,],[43,43,43,43,43,43,43,-41,-42,43,-45,-46,-47,-48,-49,-50,-51,-52,-53,43,-43,-44,43,43,43,]),'TINTEGER':([23,26,103,],[47,47,47,]),'TFLOAT':([23,26,103,],[48,48,48,]),'TSTRING':([23,26,103,],[49,49,49,]),'TBOOL':([23,26,103,],[50,50,50,]),'TARRAY':([23,26,103,],[51,51,51,]),'RBRACKET_S':([40,59,],[-62,88,]),'ASSIGNMENT':([46,47,48,49,50,51,54,],[83,-67,-68,-69,-70,-71,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition_sequence':([0,2,],[1,8,]),'definition':([0,2,],[2,2,]),'function_declaration':([0,2,],[3,3,]),'variable_declaration':([0,2,],[4,4,]),'function_heading':([0,2,],[5,5,]),'identifier':([0,2,5,18,20,21,22,25,27,29,38,39,44,61,64,74,81,83,84,86,89,105,],[6,6,19,19,33,33,33,19,33,19,33,33,19,33,33,33,94,33,33,33,19,94,]),'body':([5,29,44,89,],[9,60,79,102,]),'statement':([5,18,25,29,44,89,],[10,25,25,10,10,10,]),'statement_part':([5,18,25,29,44,89,],[11,11,11,11,11,11,]),'assignment_statement':([5,18,25,29,44,89,],[12,12,12,12,12,12,]),'if_statement':([5,18,25,29,44,89,],[13,13,13,13,13,13,]),'while_statement':([5,18,25,29,44,89,],[14,14,14,14,14,14,]),'return_statement':([5,18,25,29,44,89,],[15,15,15,15,15,15,]),'procedure_or_function_call':([5,18,25,29,44,89,],[16,16,16,16,16,16,]),'array':([5,18,25,29,44,89,],[17,17,17,17,17,17,]),'statement_sequence':([18,25,],[24,53,]),'expression':([20,21,27,38,86,],[29,44,58,77,58,]),'expression_m':([20,21,27,38,61,86,],[30,30,30,30,90,30,]),'expression_s':([20,21,27,38,61,64,86,],[31,31,31,31,31,91,31,]),'element':([20,21,22,27,38,39,61,64,74,83,84,86,],[32,32,45,32,32,78,32,32,92,97,98,32,]),'integer':([20,21,22,27,28,38,39,61,64,74,83,84,86,],[34,34,34,34,59,34,34,34,34,34,34,34,34,]),'float':([20,21,22,27,38,39,61,64,74,83,84,86,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'string':([20,21,22,27,38,39,61,64,74,83,84,86,],[36,36,36,36,36,36,36,36,36,36,36,36,]),'bool':([20,21,22,27,38,39,61,64,74,83,84,86,],[37,37,37,37,37,37,37,37,37,37,37,37,]),'type':([23,26,103,],[46,54,108,]),'param_list':([27,],[55,]),'param':([27,86,],[57,100,]),'and_or':([29,44,58,77,],[61,61,61,61,]),'sign':([30,90,],[64,64,]),'psign':([31,91,],[74,74,]),'parameter_list':([81,105,],[95,110,]),'parameter':([81,105,],[96,96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> definition_sequence","S'",1,None,None,None),
  ('definition_sequence -> definition definition_sequence','definition_sequence',2,'p_definition_sequence','rules.py',11),
  ('definition_sequence -> definition','definition_sequence',1,'p_definition_sequence','rules.py',12),
  ('definition -> function_declaration','definition',1,'p_definition','rules.py',19),
  ('definition -> variable_declaration','definition',1,'p_definition','rules.py',20),
  ('variable_declaration -> identifier COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','rules.py',24),
  ('variable_declaration -> identifier COLON type ASSIGNMENT element SEMICOLON','variable_declaration',6,'p_variable_declaration','rules.py',25),
  ('function_declaration -> function_heading body','function_declaration',2,'p_function_declaration','rules.py',32),
  ('function_declaration -> identifier COLON type LPAREN parameter_list RPAREN SEMICOLON','function_declaration',7,'p_function_declaration','rules.py',33),
  ('function_heading -> identifier COLON type LPAREN parameter_list RPAREN','function_heading',6,'p_function_heading','rules.py',40),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','rules.py',44),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','rules.py',45),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','rules.py',52),
  ('statement_part -> LBRACKET statement_sequence RBRACKET','statement_part',3,'p_statement_part','rules.py',56),
  ('statement_sequence -> statement statement_sequence','statement_sequence',2,'p_statement_sequence','rules.py',60),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','rules.py',61),
  ('statement -> statement_part','statement',1,'p_statement','rules.py',68),
  ('statement -> assignment_statement','statement',1,'p_statement','rules.py',69),
  ('statement -> if_statement','statement',1,'p_statement','rules.py',70),
  ('statement -> while_statement','statement',1,'p_statement','rules.py',71),
  ('statement -> return_statement','statement',1,'p_statement','rules.py',72),
  ('statement -> procedure_or_function_call','statement',1,'p_statement','rules.py',73),
  ('statement -> array','statement',1,'p_statement','rules.py',74),
  ('statement -> <empty>','statement',0,'p_statement','rules.py',75),
  ('body -> statement','body',1,'p_body','rules.py',80),
  ('procedure_or_function_call -> identifier LPAREN param_list RPAREN SEMICOLON','procedure_or_function_call',5,'p_procedure_or_function_call','rules.py',84),
  ('procedure_or_function_call -> identifier LPAREN RPAREN SEMICOLON','procedure_or_function_call',4,'p_procedure_or_function_call','rules.py',85),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','rules.py',92),
  ('param_list -> param','param_list',1,'p_param_list','rules.py',93),
  ('param -> expression','param',1,'p_param','rules.py',100),
  ('assignment_statement -> identifier COLON type ASSIGNMENT element SEMICOLON','assignment_statement',6,'p_assignment_statement','rules.py',104),
  ('if_statement -> IF expression body ELSE body','if_statement',5,'p_if_statement','rules.py',108),
  ('if_statement -> IF expression body','if_statement',3,'p_if_statement','rules.py',109),
  ('while_statement -> WHILE expression body','while_statement',3,'p_while_statement','rules.py',116),
  ('return_statement -> RETURN element SEMICOLON','return_statement',3,'p_return_statement','rules.py',120),
  ('expression -> expression_m','expression',1,'p_expression','rules.py',124),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','rules.py',125),
  ('expression_m -> expression_s','expression_m',1,'p_expression_m','rules.py',132),
  ('expression_m -> expression_m sign expression_s','expression_m',3,'p_expression_m','rules.py',133),
  ('expression_s -> element','expression_s',1,'p_expression_s','rules.py',140),
  ('expression_s -> expression_s psign element','expression_s',3,'p_expression_s','rules.py',141),
  ('and_or -> AND','and_or',1,'p_and_or','rules.py',148),
  ('and_or -> OR','and_or',1,'p_and_or','rules.py',149),
  ('psign -> TIMES','psign',1,'p_psign','rules.py',153),
  ('psign -> DIV','psign',1,'p_psign','rules.py',154),
  ('sign -> PLUS','sign',1,'p_sign','rules.py',158),
  ('sign -> MINUS','sign',1,'p_sign','rules.py',159),
  ('sign -> MOD','sign',1,'p_sign','rules.py',160),
  ('sign -> EQUAL','sign',1,'p_sign','rules.py',161),
  ('sign -> NEQUAL','sign',1,'p_sign','rules.py',162),
  ('sign -> LT','sign',1,'p_sign','rules.py',163),
  ('sign -> LTE','sign',1,'p_sign','rules.py',164),
  ('sign -> GT','sign',1,'p_sign','rules.py',165),
  ('sign -> GTE','sign',1,'p_sign','rules.py',166),
  ('element -> identifier','element',1,'p_element','rules.py',170),
  ('element -> integer','element',1,'p_element','rules.py',171),
  ('element -> float','element',1,'p_element','rules.py',172),
  ('element -> string','element',1,'p_element','rules.py',173),
  ('element -> bool','element',1,'p_element','rules.py',174),
  ('element -> LPAREN expression RPAREN','element',3,'p_element','rules.py',175),
  ('element -> NOT element','element',2,'p_element','rules.py',176),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','rules.py',183),
  ('integer -> INTEGER','integer',1,'p_integer','rules.py',191),
  ('float -> FLOAT','float',1,'p_float','rules.py',195),
  ('string -> STRING','string',1,'p_str','rules.py',199),
  ('bool -> BOOL','bool',1,'p_bool','rules.py',203),
  ('array -> identifier LBRACKET_S integer RBRACKET_S SEMICOLON','array',5,'p_array','rules.py',207),
  ('type -> TINTEGER','type',1,'p_type','rules.py',211),
  ('type -> TFLOAT','type',1,'p_type','rules.py',212),
  ('type -> TSTRING','type',1,'p_type','rules.py',213),
  ('type -> TBOOL','type',1,'p_type','rules.py',214),
  ('type -> TARRAY','type',1,'p_type','rules.py',215),
]
