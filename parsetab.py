
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODleftEQUALNEQUALLTELTGTGTEleftANDORAND ARRAY ASSIGNMENT BOOL COLON COMMA COMMENT DIV ELSE EQUAL FLOAT GT GTE IDENTIFIER IF INTEGER LBRACKET LBRACKET_S LPAREN LT LTE MINUS MOD NEQUAL NOT OR PLUS RBRACKET RBRACKET_S RETURN RPAREN SEMICOLON STRING TBOOL TFLOAT TIMES TINTEGER TSTRING TVOID VOID WHILE definition_sequence : definition definition_sequence\n\t| definition  definition : function_declaration\n\t| variable_declaration  variable_declaration : identifier COLON type SEMICOLON\n\t| identifier COLON type ASSIGNMENT expression SEMICOLON  function_declaration : function_heading body \n\t| identifier COLON type LPAREN parameter_list RPAREN SEMICOLON  function_heading : identifier COLON type LPAREN parameter_list RPAREN  parameter_list : parameter COMMA parameter_list\n\t| parameter \n\t|  parameter : identifier COLON type  statement_part : LBRACKET statement_sequence RBRACKET  statement_sequence : statement statement_sequence\n\t| statement  statement : statement_part\n\t | assignment_statement\n\t | array_def\n\t | if_statement\n\t | while_statement\n\t | return_statement\n\t | function_call\n\t | array_call\n     | expression SEMICOLON\n\t |  body : statement  function_call : identifier LPAREN param_list RPAREN SEMICOLON  array_call : identifier LBRACKET_S expression RBRACKET_S SEMICOLON  param_list : param COMMA param_list\n\t | param \n\t |  param : expression  assignment_statement : identifier COLON type ASSIGNMENT expression SEMICOLON \n\t| identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON  array_def : identifier COLON type SEMICOLON  if_statement : IF expression body ELSE body\n\t| IF expression body  while_statement : WHILE expression body  return_statement : RETURN expression SEMICOLON  expression : expression_m\n\t| expression and_or expression_m  expression_m : expression_e\n\t| expression_m sign expression_e  and_or : AND\n\t| OR  sign : TIMES \n\t| DIV\n\t| PLUS\n\t| MINUS\n\t| MOD\n\t| EQUAL\n\t| NEQUAL\n\t| LT\n\t| LTE\n\t| GT\n\t| GTE  expression_e : identifier\n\t| integer\n\t| float\n\t| string\n\t| bool\n\t| LPAREN expression RPAREN \n\t| NOT expression\n    | function_call_inline \n\t| array_call_inline  function_call_inline : identifier LPAREN param_list RPAREN  array_call_inline : identifier LBRACKET_S expression RBRACKET_S  identifier : IDENTIFIER  integer : INTEGER  float : FLOAT  string : STRING  bool : BOOL  type : TINTEGER\n\t| TFLOAT\n\t| TSTRING \n\t| TBOOL \n\t| LBRACKET_S type RBRACKET_S '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,81,82,83,84,85,86,87,88,89,90,92,93,96,97,106,107,108,110,111,112,114,115,116,117,120,122,],[7,7,-3,-4,7,-69,-7,-27,-17,-18,-19,-20,-21,-22,-23,-24,7,7,7,7,7,-41,-43,-59,-60,-61,-62,7,-65,-66,-70,-71,-72,-73,-25,7,-45,-46,7,7,7,7,-58,7,7,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,-42,-14,-38,7,7,-39,-40,-63,-44,7,-5,7,7,-36,7,7,7,-29,-28,-37,-67,-68,-9,7,-6,-34,-8,-35,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,26,27,28,29,30,31,33,34,35,36,37,38,40,49,50,51,66,73,74,81,84,85,86,87,89,93,97,107,108,110,111,112,114,116,117,120,122,],[0,-2,-3,-4,-26,-69,-1,-7,-27,-17,-18,-19,-20,-21,-22,-23,-24,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,-26,-58,-26,-64,-42,-14,-38,-39,-40,-63,-44,-5,-36,-26,-29,-28,-37,-67,-68,-9,-6,-34,-8,-35,]),'LBRACKET':([5,7,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,33,34,35,36,37,38,40,45,49,50,51,66,73,74,81,84,85,86,87,93,97,107,108,110,111,112,114,117,122,],[20,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,20,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,20,20,-58,20,-64,-42,-14,-38,-39,-40,-63,-44,-36,20,-29,-28,-37,-67,-68,-9,-34,-35,]),'IF':([5,7,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,33,34,35,36,37,38,40,45,49,50,51,66,73,74,81,84,85,86,87,93,97,107,108,110,111,112,114,117,122,],[22,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,22,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,22,22,-58,22,-64,-42,-14,-38,-39,-40,-63,-44,-36,22,-29,-28,-37,-67,-68,-9,-34,-35,]),'WHILE':([5,7,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,33,34,35,36,37,38,40,45,49,50,51,66,73,74,81,84,85,86,87,93,97,107,108,110,111,112,114,117,122,],[23,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,23,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,23,23,-58,23,-64,-42,-14,-38,-39,-40,-63,-44,-36,23,-29,-28,-37,-67,-68,-9,-34,-35,]),'RETURN':([5,7,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,33,34,35,36,37,38,40,45,49,50,51,66,73,74,81,84,85,86,87,93,97,107,108,110,111,112,114,117,122,],[24,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,24,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,24,24,-58,24,-64,-42,-14,-38,-39,-40,-63,-44,-36,24,-29,-28,-37,-67,-68,-9,-34,-35,]),'LPAREN':([5,7,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,81,82,83,84,85,86,87,90,92,93,96,97,104,106,107,108,110,111,112,114,117,122,],[25,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,25,48,25,25,25,25,-41,-43,-59,-60,-61,-62,25,-65,-66,-70,-71,-72,-73,-25,25,-45,-46,25,25,25,25,82,25,25,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,88,-74,-75,-76,-77,-42,-14,-38,25,25,-39,-40,-63,-44,25,25,-36,25,25,-78,25,-29,-28,-37,-67,-68,-9,-34,-35,]),'NOT':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,81,82,83,84,85,86,87,90,92,93,96,97,106,107,108,110,111,112,114,117,122,],[32,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,32,32,32,32,32,-41,-43,-59,-60,-61,-62,32,-65,-66,-70,-71,-72,-73,-25,32,-45,-46,32,32,32,32,-58,32,32,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,-42,-14,-38,32,32,-39,-40,-63,-44,32,32,-36,32,32,32,-29,-28,-37,-67,-68,-9,-34,-35,]),'INTEGER':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,81,82,83,84,85,86,87,90,92,93,96,97,106,107,108,110,111,112,114,117,122,],[35,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,35,35,35,35,35,-41,-43,-59,-60,-61,-62,35,-65,-66,-70,-71,-72,-73,-25,35,-45,-46,35,35,35,35,-58,35,35,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,-42,-14,-38,35,35,-39,-40,-63,-44,35,35,-36,35,35,35,-29,-28,-37,-67,-68,-9,-34,-35,]),'FLOAT':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,81,82,83,84,85,86,87,90,92,93,96,97,106,107,108,110,111,112,114,117,122,],[36,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,36,36,36,36,36,-41,-43,-59,-60,-61,-62,36,-65,-66,-70,-71,-72,-73,-25,36,-45,-46,36,36,36,36,-58,36,36,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,-42,-14,-38,36,36,-39,-40,-63,-44,36,36,-36,36,36,36,-29,-28,-37,-67,-68,-9,-34,-35,]),'STRING':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,81,82,83,84,85,86,87,90,92,93,96,97,106,107,108,110,111,112,114,117,122,],[37,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,37,37,37,37,37,-41,-43,-59,-60,-61,-62,37,-65,-66,-70,-71,-72,-73,-25,37,-45,-46,37,37,37,37,-58,37,37,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,-42,-14,-38,37,37,-39,-40,-63,-44,37,37,-36,37,37,37,-29,-28,-37,-67,-68,-9,-34,-35,]),'BOOL':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,73,74,81,82,83,84,85,86,87,90,92,93,96,97,106,107,108,110,111,112,114,117,122,],[38,-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,38,38,38,38,38,-41,-43,-59,-60,-61,-62,38,-65,-66,-70,-71,-72,-73,-25,38,-45,-46,38,38,38,38,-58,38,38,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-64,-42,-14,-38,38,38,-39,-40,-63,-44,38,38,-36,38,38,38,-29,-28,-37,-67,-68,-9,-34,-35,]),'COLON':([6,7,21,100,],[39,-69,46,113,]),'LBRACKET_S':([7,21,39,46,50,72,113,],[-69,47,72,72,83,72,72,]),'TIMES':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,55,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,55,-63,-44,-68,-67,-67,-68,]),'DIV':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,56,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,56,-63,-44,-68,-67,-67,-68,]),'PLUS':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,57,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,57,-63,-44,-68,-67,-67,-68,]),'MINUS':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,58,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,58,-63,-44,-68,-67,-67,-68,]),'MOD':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,59,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,59,-63,-44,-68,-67,-67,-68,]),'EQUAL':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,60,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,60,-63,-44,-68,-67,-67,-68,]),'NEQUAL':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,61,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,61,-63,-44,-68,-67,-67,-68,]),'LT':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,62,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,62,-63,-44,-68,-67,-67,-68,]),'LTE':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,63,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,63,-63,-44,-68,-67,-67,-68,]),'GT':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,64,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,64,-63,-44,-68,-67,-67,-68,]),'GTE':([7,21,26,27,28,29,30,31,33,34,35,36,37,38,50,66,73,86,87,94,95,111,112,],[-69,-58,65,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,65,-63,-44,-68,-67,-67,-68,]),'SEMICOLON':([7,19,21,26,27,28,29,30,31,33,34,35,36,37,38,50,52,66,67,68,69,70,71,73,76,86,87,94,95,103,104,105,111,112,114,118,],[-69,40,-58,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,85,-64,89,-74,-75,-76,-77,-42,93,-63,-44,107,108,116,-78,117,-67,-68,120,122,]),'AND':([7,19,21,26,27,28,29,30,31,33,34,35,36,37,38,49,50,51,52,53,66,73,77,80,86,87,94,95,99,103,105,111,112,118,],[-69,42,-58,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,42,-58,42,42,42,42,-42,42,42,-63,-44,-68,-67,42,42,42,-67,-68,42,]),'OR':([7,19,21,26,27,28,29,30,31,33,34,35,36,37,38,49,50,51,52,53,66,73,77,80,86,87,94,95,99,103,105,111,112,118,],[-69,43,-58,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,43,-58,43,43,43,43,-42,43,43,-63,-44,-68,-67,43,43,43,-67,-68,43,]),'ELSE':([7,10,11,12,13,14,15,16,17,18,26,27,28,29,30,31,33,34,35,36,37,38,40,49,50,51,66,73,74,81,84,85,86,87,93,97,107,108,110,111,112,117,122,],[-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,-26,-58,-26,-64,-42,-14,97,-39,-40,-63,-44,-36,-26,-29,-28,-37,-67,-68,-34,-35,]),'RBRACKET':([7,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,33,34,35,36,37,38,40,44,45,49,50,51,66,73,74,75,81,84,85,86,87,93,97,107,108,110,111,112,117,122,],[-69,-27,-17,-18,-19,-20,-21,-22,-23,-24,-26,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-25,74,-16,-26,-58,-26,-64,-42,-14,-15,-38,-39,-40,-63,-44,-36,-26,-29,-28,-37,-67,-68,-34,-35,]),'RPAREN':([7,26,27,28,29,30,31,33,34,35,36,37,38,48,50,53,66,68,69,70,71,73,78,79,80,82,86,87,88,96,98,101,102,104,109,111,112,115,119,121,],[-69,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-32,-58,86,-64,-74,-75,-76,-77,-42,95,-31,-33,-32,-63,-44,-12,-32,111,114,-11,-78,-30,-67,-68,-12,-13,-10,]),'RBRACKET_S':([7,26,27,28,29,30,31,33,34,35,36,37,38,50,66,68,69,70,71,73,77,86,87,91,99,104,111,112,],[-69,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,-74,-75,-76,-77,-42,94,-63,-44,104,112,-78,-67,-68,]),'COMMA':([7,26,27,28,29,30,31,33,34,35,36,37,38,50,66,68,69,70,71,73,79,80,86,87,102,104,111,112,119,],[-69,-41,-43,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-58,-64,-74,-75,-76,-77,-42,96,-33,-63,-44,115,-78,-67,-68,-13,]),'TINTEGER':([39,46,72,113,],[68,68,68,68,]),'TFLOAT':([39,46,72,113,],[69,69,69,69,]),'TSTRING':([39,46,72,113,],[70,70,70,70,]),'TBOOL':([39,46,72,113,],[71,71,71,71,]),'ASSIGNMENT':([67,68,69,70,71,76,94,104,],[90,-74,-75,-76,-77,92,106,-78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition_sequence':([0,2,],[1,8,]),'definition':([0,2,],[2,2,]),'function_declaration':([0,2,],[3,3,]),'variable_declaration':([0,2,],[4,4,]),'function_heading':([0,2,],[5,5,]),'identifier':([0,2,5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,88,90,92,96,97,106,115,],[6,6,21,21,50,50,50,50,50,50,21,50,50,21,21,50,50,50,100,50,50,50,21,50,100,]),'body':([5,49,51,97,],[9,81,84,110,]),'statement':([5,20,45,49,51,97,],[10,45,45,10,10,10,]),'statement_part':([5,20,45,49,51,97,],[11,11,11,11,11,11,]),'assignment_statement':([5,20,45,49,51,97,],[12,12,12,12,12,12,]),'array_def':([5,20,45,49,51,97,],[13,13,13,13,13,13,]),'if_statement':([5,20,45,49,51,97,],[14,14,14,14,14,14,]),'while_statement':([5,20,45,49,51,97,],[15,15,15,15,15,15,]),'return_statement':([5,20,45,49,51,97,],[16,16,16,16,16,16,]),'function_call':([5,20,45,49,51,97,],[17,17,17,17,17,17,]),'array_call':([5,20,45,49,51,97,],[18,18,18,18,18,18,]),'expression':([5,20,22,23,24,25,32,45,47,48,49,51,82,83,90,92,96,97,106,],[19,19,49,51,52,53,66,19,77,80,19,19,80,99,103,105,80,19,118,]),'expression_m':([5,20,22,23,24,25,32,41,45,47,48,49,51,82,83,90,92,96,97,106,],[26,26,26,26,26,26,26,73,26,26,26,26,26,26,26,26,26,26,26,26,]),'expression_e':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[27,27,27,27,27,27,27,27,27,27,27,27,27,87,27,27,27,27,27,27,27,]),'integer':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'float':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'string':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'bool':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'function_call_inline':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'array_call_inline':([5,20,22,23,24,25,32,41,45,47,48,49,51,54,82,83,90,92,96,97,106,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'and_or':([19,49,51,52,53,66,77,80,99,103,105,118,],[41,41,41,41,41,41,41,41,41,41,41,41,]),'statement_sequence':([20,45,],[44,75,]),'sign':([26,73,],[54,54,]),'type':([39,46,72,113,],[67,76,91,119,]),'param_list':([48,82,96,],[78,98,109,]),'param':([48,82,96,],[79,79,79,]),'parameter_list':([88,115,],[101,121,]),'parameter':([88,115,],[102,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> definition_sequence","S'",1,None,None,None),
  ('definition_sequence -> definition definition_sequence','definition_sequence',2,'p_definition_sequence','rules.py',12),
  ('definition_sequence -> definition','definition_sequence',1,'p_definition_sequence','rules.py',13),
  ('definition -> function_declaration','definition',1,'p_definition','rules.py',20),
  ('definition -> variable_declaration','definition',1,'p_definition','rules.py',21),
  ('variable_declaration -> identifier COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','rules.py',25),
  ('variable_declaration -> identifier COLON type ASSIGNMENT expression SEMICOLON','variable_declaration',6,'p_variable_declaration','rules.py',26),
  ('function_declaration -> function_heading body','function_declaration',2,'p_function_declaration','rules.py',33),
  ('function_declaration -> identifier COLON type LPAREN parameter_list RPAREN SEMICOLON','function_declaration',7,'p_function_declaration','rules.py',34),
  ('function_heading -> identifier COLON type LPAREN parameter_list RPAREN','function_heading',6,'p_function_heading','rules.py',45),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','rules.py',52),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','rules.py',53),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','rules.py',54),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','rules.py',61),
  ('statement_part -> LBRACKET statement_sequence RBRACKET','statement_part',3,'p_statement_part','rules.py',65),
  ('statement_sequence -> statement statement_sequence','statement_sequence',2,'p_statement_sequence','rules.py',69),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','rules.py',70),
  ('statement -> statement_part','statement',1,'p_statement','rules.py',77),
  ('statement -> assignment_statement','statement',1,'p_statement','rules.py',78),
  ('statement -> array_def','statement',1,'p_statement','rules.py',79),
  ('statement -> if_statement','statement',1,'p_statement','rules.py',80),
  ('statement -> while_statement','statement',1,'p_statement','rules.py',81),
  ('statement -> return_statement','statement',1,'p_statement','rules.py',82),
  ('statement -> function_call','statement',1,'p_statement','rules.py',83),
  ('statement -> array_call','statement',1,'p_statement','rules.py',84),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','rules.py',85),
  ('statement -> <empty>','statement',0,'p_statement','rules.py',86),
  ('body -> statement','body',1,'p_body','rules.py',91),
  ('function_call -> identifier LPAREN param_list RPAREN SEMICOLON','function_call',5,'p_function_call','rules.py',95),
  ('array_call -> identifier LBRACKET_S expression RBRACKET_S SEMICOLON','array_call',5,'p_array_call','rules.py',102),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','rules.py',106),
  ('param_list -> param','param_list',1,'p_param_list','rules.py',107),
  ('param_list -> <empty>','param_list',0,'p_param_list','rules.py',108),
  ('param -> expression','param',1,'p_param','rules.py',115),
  ('assignment_statement -> identifier COLON type ASSIGNMENT expression SEMICOLON','assignment_statement',6,'p_assignment_statement','rules.py',119),
  ('assignment_statement -> identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON','assignment_statement',7,'p_assignment_statement','rules.py',120),
  ('array_def -> identifier COLON type SEMICOLON','array_def',4,'p_array_decl','rules.py',127),
  ('if_statement -> IF expression body ELSE body','if_statement',5,'p_if_statement','rules.py',131),
  ('if_statement -> IF expression body','if_statement',3,'p_if_statement','rules.py',132),
  ('while_statement -> WHILE expression body','while_statement',3,'p_while_statement','rules.py',139),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','rules.py',143),
  ('expression -> expression_m','expression',1,'p_expression','rules.py',147),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','rules.py',148),
  ('expression_m -> expression_e','expression_m',1,'p_expression_m','rules.py',155),
  ('expression_m -> expression_m sign expression_e','expression_m',3,'p_expression_m','rules.py',156),
  ('and_or -> AND','and_or',1,'p_and_or','rules.py',163),
  ('and_or -> OR','and_or',1,'p_and_or','rules.py',164),
  ('sign -> TIMES','sign',1,'p_sign','rules.py',168),
  ('sign -> DIV','sign',1,'p_sign','rules.py',169),
  ('sign -> PLUS','sign',1,'p_sign','rules.py',170),
  ('sign -> MINUS','sign',1,'p_sign','rules.py',171),
  ('sign -> MOD','sign',1,'p_sign','rules.py',172),
  ('sign -> EQUAL','sign',1,'p_sign','rules.py',173),
  ('sign -> NEQUAL','sign',1,'p_sign','rules.py',174),
  ('sign -> LT','sign',1,'p_sign','rules.py',175),
  ('sign -> LTE','sign',1,'p_sign','rules.py',176),
  ('sign -> GT','sign',1,'p_sign','rules.py',177),
  ('sign -> GTE','sign',1,'p_sign','rules.py',178),
  ('expression_e -> identifier','expression_e',1,'p_expression_e','rules.py',182),
  ('expression_e -> integer','expression_e',1,'p_expression_e','rules.py',183),
  ('expression_e -> float','expression_e',1,'p_expression_e','rules.py',184),
  ('expression_e -> string','expression_e',1,'p_expression_e','rules.py',185),
  ('expression_e -> bool','expression_e',1,'p_expression_e','rules.py',186),
  ('expression_e -> LPAREN expression RPAREN','expression_e',3,'p_expression_e','rules.py',187),
  ('expression_e -> NOT expression','expression_e',2,'p_expression_e','rules.py',188),
  ('expression_e -> function_call_inline','expression_e',1,'p_expression_e','rules.py',189),
  ('expression_e -> array_call_inline','expression_e',1,'p_expression_e','rules.py',190),
  ('function_call_inline -> identifier LPAREN param_list RPAREN','function_call_inline',4,'p_function_call_inline','rules.py',199),
  ('array_call_inline -> identifier LBRACKET_S expression RBRACKET_S','array_call_inline',4,'p_array_call_inline','rules.py',206),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','rules.py',210),
  ('integer -> INTEGER','integer',1,'p_integer','rules.py',218),
  ('float -> FLOAT','float',1,'p_float','rules.py',222),
  ('string -> STRING','string',1,'p_str','rules.py',226),
  ('bool -> BOOL','bool',1,'p_bool','rules.py',230),
  ('type -> TINTEGER','type',1,'p_type','rules.py',234),
  ('type -> TFLOAT','type',1,'p_type','rules.py',235),
  ('type -> TSTRING','type',1,'p_type','rules.py',236),
  ('type -> TBOOL','type',1,'p_type','rules.py',237),
  ('type -> LBRACKET_S type RBRACKET_S','type',3,'p_type','rules.py',238),
]
