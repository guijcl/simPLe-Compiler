
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODleftEQUALNEQUALLTELTGTGTEleftANDORAND ARRAY ASSIGNMENT BOOL COLON COMMA COMMENTBEGIN COMMENTEND DIV ELSE EQUAL GT GTE IDENTIFIER IF INTEGER LBRACKET LPAREN LT LTE MINUS MOD NEQUAL OR PLUS RBRACKET RETURN RPAREN SEMICOLON STRING TARRAY TBOOL TIMES TINTEGER TSTRING TVOIDE VOID WHILE definition_sequence : definition definition_sequence\n\t| definition  definition : function_declaration\n\t| variable_declaration  variable_declaration : identifier COLON type SEMICOLON\n\t| identifier COLON type ASSIGNMENT element SEMICOLON  function_declaration : function_heading statement  function_heading : identifier COLON type LPAREN parameter_list RPAREN  parameter_list : parameter COMMA parameter_list\n\t| parameter  parameter : identifier COLON type  statement_part : LBRACKET statement_sequence RBRACKET  statement_sequence : statement statement_sequence\n\t| statement  statement : statement_part\n\t | assignment_statement\n\t | if_statement\n\t | while_statement\n\t | return_statement\n\t |  assignment_statement : identifier COLON type ASSIGNMENT element SEMICOLON  if_statement : IF expression statement ELSE statement\n\t| IF expression statement  while_statement : WHILE expression statement  return_statement : RETURN element SEMICOLON  expression : expression and_or expression_m\n\t| expression_m  expression_m : expression_s\n\t| expression_m sign expression_s  expression_s : element \n\t| expression_s psign element  and_or : AND\n\t| OR  psign : TIMES \n\t| DIV  sign : PLUS\n\t| MINUS\n\t| MOD\n\t| EQUAL\n\t| NEQUAL\n\t| LT\n\t| LTE\n\t| GT\n\t| GTE  element : identifier\n\t| integer\n\t| string\n\t| LPAREN expression RPAREN  identifier : IDENTIFIER  integer : INTEGER  string : STRING  type : TINTEGER\n\t| TSTRING '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,9,10,11,12,13,14,15,17,18,19,22,24,25,26,27,28,29,30,31,32,33,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,76,77,79,80,81,],[7,7,-3,-4,7,-49,-7,-15,-16,-17,-18,-19,7,7,7,7,7,7,-27,-28,-30,-45,-46,-47,7,-50,-51,7,-12,-23,7,-32,-33,7,-36,-37,-38,-39,-40,-41,-42,-43,-44,7,-34,-35,-24,-25,-5,7,7,7,7,-26,-29,-31,-48,-22,-6,-8,7,-21,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,24,25,26,27,28,29,30,32,33,34,39,42,60,61,62,66,67,68,69,70,76,77,79,81,],[0,-2,-3,-4,-20,-49,-1,-7,-15,-16,-17,-18,-19,-20,-27,-28,-30,-45,-46,-47,-50,-51,-20,-12,-23,-24,-25,-5,-20,-26,-29,-31,-48,-22,-6,-8,-21,]),'LBRACKET':([5,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,32,33,34,39,42,60,61,66,67,68,69,70,76,79,81,],[15,-49,-15,-16,-17,-18,-19,15,15,15,-27,-28,-30,-45,-46,-47,-50,-51,15,-12,-23,-24,-25,15,-26,-29,-31,-48,-22,-8,-21,]),'IF':([5,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,32,33,34,39,42,60,61,66,67,68,69,70,76,79,81,],[17,-49,-15,-16,-17,-18,-19,17,17,17,-27,-28,-30,-45,-46,-47,-50,-51,17,-12,-23,-24,-25,17,-26,-29,-31,-48,-22,-8,-21,]),'WHILE':([5,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,32,33,34,39,42,60,61,66,67,68,69,70,76,79,81,],[18,-49,-15,-16,-17,-18,-19,18,18,18,-27,-28,-30,-45,-46,-47,-50,-51,18,-12,-23,-24,-25,18,-26,-29,-31,-48,-22,-8,-21,]),'RETURN':([5,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,32,33,34,39,42,60,61,66,67,68,69,70,76,79,81,],[19,-49,-15,-16,-17,-18,-19,19,19,19,-27,-28,-30,-45,-46,-47,-50,-51,19,-12,-23,-24,-25,19,-26,-29,-31,-48,-22,-8,-21,]),'COLON':([6,7,16,72,],[20,-49,23,78,]),'TIMES':([7,26,27,28,29,30,32,33,68,69,70,],[-49,57,-30,-45,-46,-47,-50,-51,57,-31,-48,]),'DIV':([7,26,27,28,29,30,32,33,68,69,70,],[-49,58,-30,-45,-46,-47,-50,-51,58,-31,-48,]),'PLUS':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,47,-28,-30,-45,-46,-47,-50,-51,47,-29,-31,-48,]),'MINUS':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,48,-28,-30,-45,-46,-47,-50,-51,48,-29,-31,-48,]),'MOD':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,49,-28,-30,-45,-46,-47,-50,-51,49,-29,-31,-48,]),'EQUAL':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,50,-28,-30,-45,-46,-47,-50,-51,50,-29,-31,-48,]),'NEQUAL':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,51,-28,-30,-45,-46,-47,-50,-51,51,-29,-31,-48,]),'LT':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,52,-28,-30,-45,-46,-47,-50,-51,52,-29,-31,-48,]),'LTE':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,53,-28,-30,-45,-46,-47,-50,-51,53,-29,-31,-48,]),'GT':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,54,-28,-30,-45,-46,-47,-50,-51,54,-29,-31,-48,]),'GTE':([7,25,26,27,28,29,30,32,33,67,68,69,70,],[-49,55,-28,-30,-45,-46,-47,-50,-51,55,-29,-31,-48,]),'AND':([7,24,25,26,27,28,29,30,32,33,34,59,67,68,69,70,],[-49,44,-27,-28,-30,-45,-46,-47,-50,-51,44,44,-26,-29,-31,-48,]),'OR':([7,24,25,26,27,28,29,30,32,33,34,59,67,68,69,70,],[-49,45,-27,-28,-30,-45,-46,-47,-50,-51,45,45,-26,-29,-31,-48,]),'ELSE':([7,10,11,12,13,14,24,25,26,27,28,29,30,32,33,34,39,42,60,61,66,67,68,69,70,76,81,],[-49,-15,-16,-17,-18,-19,-20,-27,-28,-30,-45,-46,-47,-50,-51,-20,-12,66,-24,-25,-20,-26,-29,-31,-48,-22,-21,]),'RBRACKET':([7,10,11,12,13,14,15,21,22,24,25,26,27,28,29,30,32,33,34,39,40,42,60,61,66,67,68,69,70,76,81,],[-49,-15,-16,-17,-18,-19,-20,39,-14,-20,-27,-28,-30,-45,-46,-47,-50,-51,-20,-12,-13,-23,-24,-25,-20,-26,-29,-31,-48,-22,-21,]),'SEMICOLON':([7,28,29,30,32,33,35,36,37,38,70,71,75,],[-49,-45,-46,-47,-50,-51,61,62,-52,-53,-48,77,81,]),'RPAREN':([7,25,26,27,28,29,30,32,33,37,38,59,67,68,69,70,73,74,82,83,],[-49,-27,-28,-30,-45,-46,-47,-50,-51,-52,-53,70,-26,-29,-31,-48,79,-10,-11,-9,]),'LPAREN':([17,18,19,31,36,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,],[31,31,31,31,64,-52,-53,31,-32,-33,31,-36,-37,-38,-39,-40,-41,-42,-43,-44,31,-34,-35,31,31,]),'INTEGER':([17,18,19,31,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,],[32,32,32,32,32,-32,-33,32,-36,-37,-38,-39,-40,-41,-42,-43,-44,32,-34,-35,32,32,]),'STRING':([17,18,19,31,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,],[33,33,33,33,33,-32,-33,33,-36,-37,-38,-39,-40,-41,-42,-43,-44,33,-34,-35,33,33,]),'TINTEGER':([20,23,78,],[37,37,37,]),'TSTRING':([20,23,78,],[38,38,38,]),'ASSIGNMENT':([36,37,38,41,],[63,-52,-53,65,]),'COMMA':([37,38,74,82,],[-52,-53,80,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition_sequence':([0,2,],[1,8,]),'definition':([0,2,],[2,2,]),'function_declaration':([0,2,],[3,3,]),'variable_declaration':([0,2,],[4,4,]),'function_heading':([0,2,],[5,5,]),'identifier':([0,2,5,15,17,18,19,22,24,31,34,43,46,56,63,64,65,66,80,],[6,6,16,16,28,28,28,16,16,28,16,28,28,28,28,72,28,16,72,]),'statement':([5,15,22,24,34,66,],[9,22,22,42,60,76,]),'statement_part':([5,15,22,24,34,66,],[10,10,10,10,10,10,]),'assignment_statement':([5,15,22,24,34,66,],[11,11,11,11,11,11,]),'if_statement':([5,15,22,24,34,66,],[12,12,12,12,12,12,]),'while_statement':([5,15,22,24,34,66,],[13,13,13,13,13,13,]),'return_statement':([5,15,22,24,34,66,],[14,14,14,14,14,14,]),'statement_sequence':([15,22,],[21,40,]),'expression':([17,18,31,],[24,34,59,]),'expression_m':([17,18,31,43,],[25,25,25,67,]),'expression_s':([17,18,31,43,46,],[26,26,26,26,68,]),'element':([17,18,19,31,43,46,56,63,65,],[27,27,35,27,27,27,69,71,75,]),'integer':([17,18,19,31,43,46,56,63,65,],[29,29,29,29,29,29,29,29,29,]),'string':([17,18,19,31,43,46,56,63,65,],[30,30,30,30,30,30,30,30,30,]),'type':([20,23,78,],[36,41,82,]),'and_or':([24,34,59,],[43,43,43,]),'sign':([25,67,],[46,46,]),'psign':([26,68,],[56,56,]),'parameter_list':([64,80,],[73,83,]),'parameter':([64,80,],[74,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> definition_sequence","S'",1,None,None,None),
  ('definition_sequence -> definition definition_sequence','definition_sequence',2,'p_definition_sequence','rules.py',11),
  ('definition_sequence -> definition','definition_sequence',1,'p_definition_sequence','rules.py',12),
  ('definition -> function_declaration','definition',1,'p_definition','rules.py',16),
  ('definition -> variable_declaration','definition',1,'p_definition','rules.py',17),
  ('variable_declaration -> identifier COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','rules.py',21),
  ('variable_declaration -> identifier COLON type ASSIGNMENT element SEMICOLON','variable_declaration',6,'p_variable_declaration','rules.py',22),
  ('function_declaration -> function_heading statement','function_declaration',2,'p_function_declaration','rules.py',29),
  ('function_heading -> identifier COLON type LPAREN parameter_list RPAREN','function_heading',6,'p_function_heading','rules.py',33),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','rules.py',37),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','rules.py',38),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','rules.py',45),
  ('statement_part -> LBRACKET statement_sequence RBRACKET','statement_part',3,'p_statement_part','rules.py',49),
  ('statement_sequence -> statement statement_sequence','statement_sequence',2,'p_statement_sequence','rules.py',53),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','rules.py',54),
  ('statement -> statement_part','statement',1,'p_statement','rules.py',61),
  ('statement -> assignment_statement','statement',1,'p_statement','rules.py',62),
  ('statement -> if_statement','statement',1,'p_statement','rules.py',63),
  ('statement -> while_statement','statement',1,'p_statement','rules.py',64),
  ('statement -> return_statement','statement',1,'p_statement','rules.py',65),
  ('statement -> <empty>','statement',0,'p_statement','rules.py',66),
  ('assignment_statement -> identifier COLON type ASSIGNMENT element SEMICOLON','assignment_statement',6,'p_assignment_statement','rules.py',71),
  ('if_statement -> IF expression statement ELSE statement','if_statement',5,'p_if_statement','rules.py',75),
  ('if_statement -> IF expression statement','if_statement',3,'p_if_statement','rules.py',76),
  ('while_statement -> WHILE expression statement','while_statement',3,'p_while_statement','rules.py',83),
  ('return_statement -> RETURN element SEMICOLON','return_statement',3,'p_return_statement','rules.py',87),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','rules.py',91),
  ('expression -> expression_m','expression',1,'p_expression','rules.py',92),
  ('expression_m -> expression_s','expression_m',1,'p_expression_m','rules.py',99),
  ('expression_m -> expression_m sign expression_s','expression_m',3,'p_expression_m','rules.py',100),
  ('expression_s -> element','expression_s',1,'p_expression_s','rules.py',107),
  ('expression_s -> expression_s psign element','expression_s',3,'p_expression_s','rules.py',108),
  ('and_or -> AND','and_or',1,'p_and_or','rules.py',115),
  ('and_or -> OR','and_or',1,'p_and_or','rules.py',116),
  ('psign -> TIMES','psign',1,'p_psign','rules.py',120),
  ('psign -> DIV','psign',1,'p_psign','rules.py',121),
  ('sign -> PLUS','sign',1,'p_sign','rules.py',125),
  ('sign -> MINUS','sign',1,'p_sign','rules.py',126),
  ('sign -> MOD','sign',1,'p_sign','rules.py',127),
  ('sign -> EQUAL','sign',1,'p_sign','rules.py',128),
  ('sign -> NEQUAL','sign',1,'p_sign','rules.py',129),
  ('sign -> LT','sign',1,'p_sign','rules.py',130),
  ('sign -> LTE','sign',1,'p_sign','rules.py',131),
  ('sign -> GT','sign',1,'p_sign','rules.py',132),
  ('sign -> GTE','sign',1,'p_sign','rules.py',133),
  ('element -> identifier','element',1,'p_element','rules.py',137),
  ('element -> integer','element',1,'p_element','rules.py',138),
  ('element -> string','element',1,'p_element','rules.py',139),
  ('element -> LPAREN expression RPAREN','element',3,'p_element','rules.py',140),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','rules.py',147),
  ('integer -> INTEGER','integer',1,'p_integer','rules.py',155),
  ('string -> STRING','string',1,'p_str','rules.py',159),
  ('type -> TINTEGER','type',1,'p_type','rules.py',163),
  ('type -> TSTRING','type',1,'p_type','rules.py',164),
]
