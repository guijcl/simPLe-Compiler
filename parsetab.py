
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODleftEQUALNEQUALLTELTGTGTEleftANDORAND ARRAY ASSIGNMENT BOOL COLON COMMA COMMENT DIV ELSE EQUAL FLOAT GT GTE IDENTIFIER IF INTEGER LBRACKET LBRACKET_S LPAREN LT LTE MINUS MOD NEQUAL NOT OR PLUS RBRACKET RBRACKET_S RETURN RPAREN SEMICOLON STRING TBOOL TFLOAT TIMES TINTEGER TSTRING TVOID VOID WHILE definition_sequence : definition definition_sequence\n\t| definition  definition : function_declaration\n\t| variable_declaration  variable_declaration : identifier COLON type SEMICOLON\n\t| identifier COLON type ASSIGNMENT expression SEMICOLON  function_declaration : function_heading body \n\t| identifier COLON type LPAREN parameter_list RPAREN SEMICOLON  function_heading : identifier COLON type LPAREN parameter_list RPAREN  parameter_list : parameter COMMA parameter_list\n\t| parameter \n\t|  parameter : identifier COLON type  statement_part : LBRACKET statement_sequence RBRACKET  statement_sequence : statement statement_sequence\n\t| statement  statement : statement_part\n\t | local_variable_declaration\n\t | assignment_statement\n\t | array_def\n\t | if_statement\n\t | while_statement\n\t | return_statement\n     | expression SEMICOLON\n\t |  body : statement  param_list : param COMMA param_list\n\t | param \n\t |  param : expression  local_variable_declaration : identifier COLON type ASSIGNMENT expression SEMICOLON  assignment_statement : identifier ASSIGNMENT expression SEMICOLON \n\t| identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON  array_def : identifier COLON array_access SEMICOLON  if_statement : IF expression body ELSE body\n\t| IF expression body  while_statement : WHILE expression body  return_statement : RETURN expression SEMICOLON \n\t| RETURN SEMICOLON  expression : expression_m\n\t| expression and_or expression_m  expression_m : expression_e\n\t| expression_m sign expression_e  and_or : AND\n\t| OR  sign : TIMES \n\t| DIV\n\t| PLUS\n\t| MINUS\n\t| MOD\n\t| EQUAL\n\t| NEQUAL\n\t| LT\n\t| LTE\n\t| GT\n\t| GTE  expression_e : identifier\n\t| integer\n\t| float\n\t| string\n\t| bool\n\t| array\n\t| LPAREN expression RPAREN \n\t| NOT expression\n    | function_call \n\t| array_call  function_call : identifier LPAREN param_list RPAREN  array_call : identifier LBRACKET_S expression RBRACKET_S  identifier : IDENTIFIER  integer : INTEGER  float : FLOAT  string : STRING  bool : BOOL  array : LBRACKET_S expression RBRACKET_S  type : TINTEGER\n\t| TFLOAT\n\t| TSTRING \n\t| TBOOL\n\t| TVOID\n\t| LBRACKET_S type RBRACKET_S  array_access : LBRACKET_S type RBRACKET_S '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,78,79,89,90,91,92,93,94,95,96,97,98,100,101,103,105,106,108,116,118,119,121,122,123,124,127,129,],[7,7,-3,-4,7,-69,-7,-26,-17,-18,-19,-20,-21,-22,-23,7,7,7,7,7,-40,-42,-58,-59,-60,-61,-62,7,7,-65,-66,-70,-71,-72,-73,-24,7,-44,-45,7,7,7,7,-57,7,7,-39,7,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,-41,-14,-74,7,-36,-37,-38,-43,-63,7,-5,7,7,-34,-32,-67,7,7,7,-68,-35,-9,7,-6,-31,-8,-33,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,25,26,27,28,29,30,31,34,35,36,37,38,39,41,52,53,54,56,70,78,79,89,91,92,93,94,95,97,101,103,105,108,118,119,121,123,124,127,129,],[0,-2,-3,-4,-25,-69,-1,-7,-26,-17,-18,-19,-20,-21,-22,-23,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,-57,-25,-25,-39,-64,-41,-14,-74,-36,-37,-38,-43,-63,-5,-34,-32,-67,-25,-68,-35,-9,-6,-31,-8,-33,]),'LBRACKET':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,56,70,78,79,89,91,92,93,94,95,101,103,105,108,118,119,121,124,129,],[19,-69,-26,-17,-18,-19,-20,-21,-22,-23,19,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,19,-57,19,19,-39,-64,-41,-14,-74,-36,-37,-38,-43,-63,-34,-32,-67,19,-68,-35,-9,-31,-33,]),'IF':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,56,70,78,79,89,91,92,93,94,95,101,103,105,108,118,119,121,124,129,],[22,-69,-26,-17,-18,-19,-20,-21,-22,-23,22,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,22,-57,22,22,-39,-64,-41,-14,-74,-36,-37,-38,-43,-63,-34,-32,-67,22,-68,-35,-9,-31,-33,]),'WHILE':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,56,70,78,79,89,91,92,93,94,95,101,103,105,108,118,119,121,124,129,],[23,-69,-26,-17,-18,-19,-20,-21,-22,-23,23,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,23,-57,23,23,-39,-64,-41,-14,-74,-36,-37,-38,-43,-63,-34,-32,-67,23,-68,-35,-9,-31,-33,]),'RETURN':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,56,70,78,79,89,91,92,93,94,95,101,103,105,108,118,119,121,124,129,],[24,-69,-26,-17,-18,-19,-20,-21,-22,-23,24,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,24,-57,24,24,-39,-64,-41,-14,-74,-36,-37,-38,-43,-63,-34,-32,-67,24,-68,-35,-9,-31,-33,]),'LPAREN':([5,7,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,78,79,89,90,91,92,93,94,95,98,100,101,103,105,106,108,113,116,118,119,121,124,129,],[32,-69,-26,-17,-18,-19,-20,-21,-22,-23,32,50,32,32,32,32,-40,-42,-58,-59,-60,-61,-62,32,32,-65,-66,-70,-71,-72,-73,-24,32,-44,-45,32,32,32,32,50,32,32,-39,32,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,96,-75,-76,-77,-78,-79,-41,-14,-74,32,-36,-37,-38,-43,-63,32,32,-34,-32,-67,32,32,-80,32,-68,-35,-9,-31,-33,]),'NOT':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,78,79,89,90,91,92,93,94,95,98,100,101,103,105,106,108,116,118,119,121,124,129,],[33,-69,-26,-17,-18,-19,-20,-21,-22,-23,33,33,33,33,33,-40,-42,-58,-59,-60,-61,-62,33,33,-65,-66,-70,-71,-72,-73,-24,33,-44,-45,33,33,33,33,-57,33,33,-39,33,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,-41,-14,-74,33,-36,-37,-38,-43,-63,33,33,-34,-32,-67,33,33,33,-68,-35,-9,-31,-33,]),'INTEGER':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,78,79,89,90,91,92,93,94,95,98,100,101,103,105,106,108,116,118,119,121,124,129,],[36,-69,-26,-17,-18,-19,-20,-21,-22,-23,36,36,36,36,36,-40,-42,-58,-59,-60,-61,-62,36,36,-65,-66,-70,-71,-72,-73,-24,36,-44,-45,36,36,36,36,-57,36,36,-39,36,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,-41,-14,-74,36,-36,-37,-38,-43,-63,36,36,-34,-32,-67,36,36,36,-68,-35,-9,-31,-33,]),'FLOAT':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,78,79,89,90,91,92,93,94,95,98,100,101,103,105,106,108,116,118,119,121,124,129,],[37,-69,-26,-17,-18,-19,-20,-21,-22,-23,37,37,37,37,37,-40,-42,-58,-59,-60,-61,-62,37,37,-65,-66,-70,-71,-72,-73,-24,37,-44,-45,37,37,37,37,-57,37,37,-39,37,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,-41,-14,-74,37,-36,-37,-38,-43,-63,37,37,-34,-32,-67,37,37,37,-68,-35,-9,-31,-33,]),'STRING':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,78,79,89,90,91,92,93,94,95,98,100,101,103,105,106,108,116,118,119,121,124,129,],[38,-69,-26,-17,-18,-19,-20,-21,-22,-23,38,38,38,38,38,-40,-42,-58,-59,-60,-61,-62,38,38,-65,-66,-70,-71,-72,-73,-24,38,-44,-45,38,38,38,38,-57,38,38,-39,38,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,-41,-14,-74,38,-36,-37,-38,-43,-63,38,38,-34,-32,-67,38,38,38,-68,-35,-9,-31,-33,]),'BOOL':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,78,79,89,90,91,92,93,94,95,98,100,101,103,105,106,108,116,118,119,121,124,129,],[39,-69,-26,-17,-18,-19,-20,-21,-22,-23,39,39,39,39,39,-40,-42,-58,-59,-60,-61,-62,39,39,-65,-66,-70,-71,-72,-73,-24,39,-44,-45,39,39,39,39,-57,39,39,-39,39,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,-41,-14,-74,39,-36,-37,-38,-43,-63,39,39,-34,-32,-67,39,39,39,-68,-35,-9,-31,-33,]),'LBRACKET_S':([5,7,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,70,77,78,79,83,89,90,91,92,93,94,95,98,100,101,103,105,106,108,116,118,119,120,121,124,129,],[21,-69,-26,-17,-18,-19,-20,-21,-22,-23,21,49,21,21,21,21,-40,-42,-58,-59,-60,-61,-62,21,21,-65,-66,-70,-71,-72,-73,77,-24,21,-44,-45,21,83,21,21,21,90,21,21,-39,21,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-64,77,-41,-14,77,-74,21,-36,-37,-38,-43,-63,21,21,-34,-32,-67,21,21,21,-68,-35,77,-9,-31,-33,]),'COLON':([6,7,20,109,],[40,-69,47,120,]),'ASSIGNMENT':([7,20,71,72,73,74,75,76,81,104,113,115,],[-69,48,98,-75,-76,-77,-78,-79,100,116,-80,-80,]),'TIMES':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,58,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,58,-74,-43,-63,-68,-67,-68,]),'DIV':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,59,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,59,-74,-43,-63,-68,-67,-68,]),'PLUS':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,60,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,60,-74,-43,-63,-68,-67,-68,]),'MINUS':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,61,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,61,-74,-43,-63,-68,-67,-68,]),'MOD':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,62,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,62,-74,-43,-63,-68,-67,-68,]),'EQUAL':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,63,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,63,-74,-43,-63,-68,-67,-68,]),'NEQUAL':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,64,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,64,-74,-43,-63,-68,-67,-68,]),'LT':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,65,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,65,-74,-43,-63,-68,-67,-68,]),'LTE':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,66,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,66,-74,-43,-63,-68,-67,-68,]),'GT':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,67,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,67,-74,-43,-63,-68,-67,-68,]),'GTE':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,78,89,94,95,104,105,118,],[-69,-57,68,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,68,-74,-43,-63,-68,-67,-68,]),'SEMICOLON':([7,18,20,24,25,26,27,28,29,30,31,34,35,36,37,38,39,52,55,70,71,72,73,74,75,76,78,82,84,89,94,95,104,105,112,113,114,115,118,121,125,],[-69,41,-57,56,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,93,-64,97,-75,-76,-77,-78,-79,-41,101,103,-74,-43,-63,-68,-67,123,-80,124,-81,-68,127,129,]),'AND':([7,18,20,25,26,27,28,29,30,31,34,35,36,37,38,39,51,52,53,54,55,69,70,78,84,85,88,89,94,95,104,105,107,112,114,118,125,],[-69,43,-57,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,43,-57,43,43,43,43,43,-41,43,43,43,-74,-43,-63,-68,-67,43,43,43,-68,43,]),'OR':([7,18,20,25,26,27,28,29,30,31,34,35,36,37,38,39,51,52,53,54,55,69,70,78,84,85,88,89,94,95,104,105,107,112,114,118,125,],[-69,44,-57,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,44,-57,44,44,44,44,44,-41,44,44,44,-74,-43,-63,-68,-67,44,44,44,-68,44,]),'RBRACKET_S':([7,25,26,27,28,29,30,31,34,35,36,37,38,39,51,52,70,72,73,74,75,76,78,85,89,94,95,99,102,105,107,113,118,],[-69,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,89,-57,-64,-75,-76,-77,-78,-79,-41,104,-74,-43,-63,113,115,-67,118,-80,-68,]),'ELSE':([7,10,11,12,13,14,15,16,17,25,26,27,28,29,30,31,34,35,36,37,38,39,41,52,53,54,56,70,78,79,89,91,92,93,94,95,101,103,105,108,118,119,124,129,],[-69,-26,-17,-18,-19,-20,-21,-22,-23,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,-57,-25,-25,-39,-64,-41,-14,-74,108,-37,-38,-43,-63,-34,-32,-67,-25,-68,-35,-31,-33,]),'RBRACKET':([7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,45,46,52,53,54,56,70,78,79,80,89,91,92,93,94,95,101,103,105,108,118,119,124,129,],[-69,-26,-17,-18,-19,-20,-21,-22,-23,-25,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-24,79,-16,-57,-25,-25,-39,-64,-41,-14,-15,-74,-36,-37,-38,-43,-63,-34,-32,-67,-25,-68,-35,-31,-33,]),'RPAREN':([7,25,26,27,28,29,30,31,34,35,36,37,38,39,50,52,69,70,72,73,74,75,76,78,86,87,88,89,94,95,96,105,106,110,111,113,117,118,122,126,128,],[-69,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-29,-57,95,-64,-75,-76,-77,-78,-79,-41,105,-28,-30,-74,-43,-63,-12,-67,-29,121,-11,-80,-27,-68,-12,-13,-10,]),'COMMA':([7,25,26,27,28,29,30,31,34,35,36,37,38,39,52,70,72,73,74,75,76,78,87,88,89,94,95,105,111,113,118,126,],[-69,-40,-42,-58,-59,-60,-61,-62,-65,-66,-70,-71,-72,-73,-57,-64,-75,-76,-77,-78,-79,-41,106,-30,-74,-43,-63,-67,122,-80,-68,-13,]),'TINTEGER':([40,47,77,83,120,],[72,72,72,72,72,]),'TFLOAT':([40,47,77,83,120,],[73,73,73,73,73,]),'TSTRING':([40,47,77,83,120,],[74,74,74,74,74,]),'TBOOL':([40,47,77,83,120,],[75,75,75,75,75,]),'TVOID':([40,47,77,83,120,],[76,76,76,76,76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition_sequence':([0,2,],[1,8,]),'definition':([0,2,],[2,2,]),'function_declaration':([0,2,],[3,3,]),'variable_declaration':([0,2,],[4,4,]),'function_heading':([0,2,],[5,5,]),'identifier':([0,2,5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,96,98,100,106,108,116,122,],[6,6,20,20,52,52,52,52,52,52,52,20,52,52,52,20,20,52,52,109,52,52,52,20,52,109,]),'body':([5,53,54,108,],[9,91,92,119,]),'statement':([5,19,46,53,54,108,],[10,46,46,10,10,10,]),'statement_part':([5,19,46,53,54,108,],[11,11,11,11,11,11,]),'local_variable_declaration':([5,19,46,53,54,108,],[12,12,12,12,12,12,]),'assignment_statement':([5,19,46,53,54,108,],[13,13,13,13,13,13,]),'array_def':([5,19,46,53,54,108,],[14,14,14,14,14,14,]),'if_statement':([5,19,46,53,54,108,],[15,15,15,15,15,15,]),'while_statement':([5,19,46,53,54,108,],[16,16,16,16,16,16,]),'return_statement':([5,19,46,53,54,108,],[17,17,17,17,17,17,]),'expression':([5,19,21,22,23,24,32,33,46,48,49,50,53,54,90,98,100,106,108,116,],[18,18,51,53,54,55,69,70,18,84,85,88,18,18,107,112,114,88,18,125,]),'expression_m':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,90,98,100,106,108,116,],[25,25,25,25,25,25,25,25,78,25,25,25,25,25,25,25,25,25,25,25,25,]),'expression_e':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,94,26,26,26,26,26,26,]),'integer':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'float':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'string':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'bool':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'array':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'function_call':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'array_call':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,57,90,98,100,106,108,116,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'and_or':([18,51,53,54,55,69,70,84,85,88,107,112,114,125,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'statement_sequence':([19,46,],[45,80,]),'sign':([25,78,],[57,57,]),'type':([40,47,77,83,120,],[71,81,99,102,126,]),'array_access':([47,],[82,]),'param_list':([50,106,],[86,117,]),'param':([50,106,],[87,87,]),'parameter_list':([96,122,],[110,128,]),'parameter':([96,122,],[111,111,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> definition_sequence","S'",1,None,None,None),
  ('definition_sequence -> definition definition_sequence','definition_sequence',2,'p_definition_sequence','rules.py',12),
  ('definition_sequence -> definition','definition_sequence',1,'p_definition_sequence','rules.py',13),
  ('definition -> function_declaration','definition',1,'p_definition','rules.py',20),
  ('definition -> variable_declaration','definition',1,'p_definition','rules.py',21),
  ('variable_declaration -> identifier COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','rules.py',25),
  ('variable_declaration -> identifier COLON type ASSIGNMENT expression SEMICOLON','variable_declaration',6,'p_variable_declaration','rules.py',26),
  ('function_declaration -> function_heading body','function_declaration',2,'p_function_declaration','rules.py',33),
  ('function_declaration -> identifier COLON type LPAREN parameter_list RPAREN SEMICOLON','function_declaration',7,'p_function_declaration','rules.py',34),
  ('function_heading -> identifier COLON type LPAREN parameter_list RPAREN','function_heading',6,'p_function_heading','rules.py',45),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','rules.py',52),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','rules.py',53),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','rules.py',54),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','rules.py',61),
  ('statement_part -> LBRACKET statement_sequence RBRACKET','statement_part',3,'p_statement_part','rules.py',65),
  ('statement_sequence -> statement statement_sequence','statement_sequence',2,'p_statement_sequence','rules.py',69),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','rules.py',70),
  ('statement -> statement_part','statement',1,'p_statement','rules.py',77),
  ('statement -> local_variable_declaration','statement',1,'p_statement','rules.py',78),
  ('statement -> assignment_statement','statement',1,'p_statement','rules.py',79),
  ('statement -> array_def','statement',1,'p_statement','rules.py',80),
  ('statement -> if_statement','statement',1,'p_statement','rules.py',81),
  ('statement -> while_statement','statement',1,'p_statement','rules.py',82),
  ('statement -> return_statement','statement',1,'p_statement','rules.py',83),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','rules.py',84),
  ('statement -> <empty>','statement',0,'p_statement','rules.py',85),
  ('body -> statement','body',1,'p_body','rules.py',90),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','rules.py',94),
  ('param_list -> param','param_list',1,'p_param_list','rules.py',95),
  ('param_list -> <empty>','param_list',0,'p_param_list','rules.py',96),
  ('param -> expression','param',1,'p_param','rules.py',103),
  ('local_variable_declaration -> identifier COLON type ASSIGNMENT expression SEMICOLON','local_variable_declaration',6,'p_local_variable_declaration','rules.py',107),
  ('assignment_statement -> identifier ASSIGNMENT expression SEMICOLON','assignment_statement',4,'p_assignment_statement','rules.py',111),
  ('assignment_statement -> identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON','assignment_statement',7,'p_assignment_statement','rules.py',112),
  ('array_def -> identifier COLON array_access SEMICOLON','array_def',4,'p_array_def','rules.py',119),
  ('if_statement -> IF expression body ELSE body','if_statement',5,'p_if_statement','rules.py',123),
  ('if_statement -> IF expression body','if_statement',3,'p_if_statement','rules.py',124),
  ('while_statement -> WHILE expression body','while_statement',3,'p_while_statement','rules.py',131),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','rules.py',135),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','rules.py',136),
  ('expression -> expression_m','expression',1,'p_expression','rules.py',143),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','rules.py',144),
  ('expression_m -> expression_e','expression_m',1,'p_expression_m','rules.py',151),
  ('expression_m -> expression_m sign expression_e','expression_m',3,'p_expression_m','rules.py',152),
  ('and_or -> AND','and_or',1,'p_and_or','rules.py',159),
  ('and_or -> OR','and_or',1,'p_and_or','rules.py',160),
  ('sign -> TIMES','sign',1,'p_sign','rules.py',164),
  ('sign -> DIV','sign',1,'p_sign','rules.py',165),
  ('sign -> PLUS','sign',1,'p_sign','rules.py',166),
  ('sign -> MINUS','sign',1,'p_sign','rules.py',167),
  ('sign -> MOD','sign',1,'p_sign','rules.py',168),
  ('sign -> EQUAL','sign',1,'p_sign','rules.py',169),
  ('sign -> NEQUAL','sign',1,'p_sign','rules.py',170),
  ('sign -> LT','sign',1,'p_sign','rules.py',171),
  ('sign -> LTE','sign',1,'p_sign','rules.py',172),
  ('sign -> GT','sign',1,'p_sign','rules.py',173),
  ('sign -> GTE','sign',1,'p_sign','rules.py',174),
  ('expression_e -> identifier','expression_e',1,'p_expression_e','rules.py',178),
  ('expression_e -> integer','expression_e',1,'p_expression_e','rules.py',179),
  ('expression_e -> float','expression_e',1,'p_expression_e','rules.py',180),
  ('expression_e -> string','expression_e',1,'p_expression_e','rules.py',181),
  ('expression_e -> bool','expression_e',1,'p_expression_e','rules.py',182),
  ('expression_e -> array','expression_e',1,'p_expression_e','rules.py',183),
  ('expression_e -> LPAREN expression RPAREN','expression_e',3,'p_expression_e','rules.py',184),
  ('expression_e -> NOT expression','expression_e',2,'p_expression_e','rules.py',185),
  ('expression_e -> function_call','expression_e',1,'p_expression_e','rules.py',186),
  ('expression_e -> array_call','expression_e',1,'p_expression_e','rules.py',187),
  ('function_call -> identifier LPAREN param_list RPAREN','function_call',4,'p_function_call','rules.py',196),
  ('array_call -> identifier LBRACKET_S expression RBRACKET_S','array_call',4,'p_array_call','rules.py',203),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','rules.py',207),
  ('integer -> INTEGER','integer',1,'p_integer','rules.py',215),
  ('float -> FLOAT','float',1,'p_float','rules.py',219),
  ('string -> STRING','string',1,'p_str','rules.py',223),
  ('bool -> BOOL','bool',1,'p_bool','rules.py',227),
  ('array -> LBRACKET_S expression RBRACKET_S','array',3,'p_array','rules.py',231),
  ('type -> TINTEGER','type',1,'p_type','rules.py',235),
  ('type -> TFLOAT','type',1,'p_type','rules.py',236),
  ('type -> TSTRING','type',1,'p_type','rules.py',237),
  ('type -> TBOOL','type',1,'p_type','rules.py',238),
  ('type -> TVOID','type',1,'p_type','rules.py',239),
  ('type -> LBRACKET_S type RBRACKET_S','type',3,'p_type','rules.py',240),
  ('array_access -> LBRACKET_S type RBRACKET_S','array_access',3,'p_array_access','rules.py',247),
]
