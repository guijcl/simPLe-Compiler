
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODleftEQUALNEQUALLTELTGTGTEleftANDORAND ARRAY ASSIGNMENT BOOL COLON COMMA COMMENT DIV ELSE EQUAL FLOAT GT GTE IDENTIFIER IF INTEGER LBRACKET LBRACKET_S LPAREN LT LTE MINUS MOD NEQUAL NOT OR PLUS RBRACKET RBRACKET_S RETURN RPAREN SEMICOLON STRING TBOOL TFLOAT TIMES TINTEGER TSTRING TVOID VOID WHILE definition_sequence : definition definition_sequence\n\t| definition  definition : function_declaration\n\t| variable_declaration  variable_declaration : identifier COLON type SEMICOLON\n\t| identifier COLON type ASSIGNMENT expression SEMICOLON  function_declaration : function_heading body \n\t| identifier COLON type LPAREN parameter_list RPAREN SEMICOLON  function_heading : identifier COLON type LPAREN parameter_list RPAREN  parameter_list : parameter COMMA parameter_list\n\t| parameter \n\t|  parameter : identifier COLON type  statement_part : LBRACKET statement_sequence RBRACKET  statement_sequence : statement statement_sequence\n\t| statement  statement : statement_part\n\t | local_variable_declaration\n\t | assignment_statement\n\t | array_def\n\t | if_statement\n\t | while_statement\n\t | return_statement\n     | expression SEMICOLON\n\t |  body : statement  param_list : param COMMA param_list\n\t | param \n\t |  param : expression  local_variable_declaration : identifier COLON type ASSIGNMENT expression SEMICOLON  assignment_statement : identifier ASSIGNMENT expression SEMICOLON \n\t| identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON  array_def : identifier COLON type SEMICOLON  if_statement : IF expression body ELSE body\n\t| IF expression body  while_statement : WHILE expression body  return_statement : RETURN expression SEMICOLON  expression : expression_m\n\t| expression and_or expression_m  expression_m : expression_e\n\t| expression_m sign expression_e  and_or : AND\n\t| OR  sign : TIMES \n\t| DIV\n\t| PLUS\n\t| MINUS\n\t| MOD\n\t| EQUAL\n\t| NEQUAL\n\t| LT\n\t| LTE\n\t| GT\n\t| GTE  expression_e : identifier\n\t| integer\n\t| float\n\t| string\n\t| bool\n\t| array\n\t| LPAREN expression RPAREN \n\t| NOT expression\n    | function_call \n\t| array_call  function_call : identifier LPAREN param_list RPAREN  array_call : identifier LBRACKET_S expression RBRACKET_S  identifier : IDENTIFIER  integer : INTEGER  float : FLOAT  string : STRING  bool : BOOL  array : LBRACKET_S expression RBRACKET_S  type : TINTEGER\n\t| TFLOAT\n\t| TSTRING \n\t| TBOOL \n\t| LBRACKET_S type RBRACKET_S '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,76,77,85,86,87,88,89,90,91,92,93,94,96,97,98,100,101,103,110,112,113,115,116,117,118,121,123,],[7,7,-3,-4,7,-68,-7,-26,-17,-18,-19,-20,-21,-22,-23,7,7,7,7,7,-39,-41,-57,-58,-59,-60,-61,7,7,-64,-65,-69,-70,-71,-72,-24,7,-43,-44,7,7,7,7,-56,7,7,7,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-40,-14,-73,7,-36,-37,-38,-42,-62,7,-5,7,7,-34,-32,-66,7,7,7,-67,-35,-9,7,-6,-31,-8,-33,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,25,26,27,28,29,30,31,34,35,36,37,38,39,41,52,53,54,69,76,77,85,87,88,89,90,91,93,97,98,100,103,112,113,115,117,118,121,123,],[0,-2,-3,-4,-25,-68,-1,-7,-26,-17,-18,-19,-20,-21,-22,-23,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,-56,-25,-25,-63,-40,-14,-73,-36,-37,-38,-42,-62,-5,-34,-32,-66,-25,-67,-35,-9,-6,-31,-8,-33,]),'LBRACKET':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,69,76,77,85,87,88,89,90,91,97,98,100,103,112,113,115,118,123,],[19,-68,-26,-17,-18,-19,-20,-21,-22,-23,19,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,19,-56,19,19,-63,-40,-14,-73,-36,-37,-38,-42,-62,-34,-32,-66,19,-67,-35,-9,-31,-33,]),'IF':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,69,76,77,85,87,88,89,90,91,97,98,100,103,112,113,115,118,123,],[22,-68,-26,-17,-18,-19,-20,-21,-22,-23,22,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,22,-56,22,22,-63,-40,-14,-73,-36,-37,-38,-42,-62,-34,-32,-66,22,-67,-35,-9,-31,-33,]),'WHILE':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,69,76,77,85,87,88,89,90,91,97,98,100,103,112,113,115,118,123,],[23,-68,-26,-17,-18,-19,-20,-21,-22,-23,23,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,23,-56,23,23,-63,-40,-14,-73,-36,-37,-38,-42,-62,-34,-32,-66,23,-67,-35,-9,-31,-33,]),'RETURN':([5,7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,46,52,53,54,69,76,77,85,87,88,89,90,91,97,98,100,103,112,113,115,118,123,],[24,-68,-26,-17,-18,-19,-20,-21,-22,-23,24,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,24,-56,24,24,-63,-40,-14,-73,-36,-37,-38,-42,-62,-34,-32,-66,24,-67,-35,-9,-31,-33,]),'LPAREN':([5,7,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,108,110,112,113,115,118,123,],[32,-68,-26,-17,-18,-19,-20,-21,-22,-23,32,50,32,32,32,32,-39,-41,-57,-58,-59,-60,-61,32,32,-64,-65,-69,-70,-71,-72,-24,32,-43,-44,32,32,32,32,50,32,32,32,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,92,-74,-75,-76,-77,-40,-14,-73,32,-36,-37,-38,-42,-62,32,32,-34,-32,-66,32,32,-78,32,-67,-35,-9,-31,-33,]),'NOT':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,110,112,113,115,118,123,],[33,-68,-26,-17,-18,-19,-20,-21,-22,-23,33,33,33,33,33,-39,-41,-57,-58,-59,-60,-61,33,33,-64,-65,-69,-70,-71,-72,-24,33,-43,-44,33,33,33,33,-56,33,33,33,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-40,-14,-73,33,-36,-37,-38,-42,-62,33,33,-34,-32,-66,33,33,33,-67,-35,-9,-31,-33,]),'INTEGER':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,110,112,113,115,118,123,],[36,-68,-26,-17,-18,-19,-20,-21,-22,-23,36,36,36,36,36,-39,-41,-57,-58,-59,-60,-61,36,36,-64,-65,-69,-70,-71,-72,-24,36,-43,-44,36,36,36,36,-56,36,36,36,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-40,-14,-73,36,-36,-37,-38,-42,-62,36,36,-34,-32,-66,36,36,36,-67,-35,-9,-31,-33,]),'FLOAT':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,110,112,113,115,118,123,],[37,-68,-26,-17,-18,-19,-20,-21,-22,-23,37,37,37,37,37,-39,-41,-57,-58,-59,-60,-61,37,37,-64,-65,-69,-70,-71,-72,-24,37,-43,-44,37,37,37,37,-56,37,37,37,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-40,-14,-73,37,-36,-37,-38,-42,-62,37,37,-34,-32,-66,37,37,37,-67,-35,-9,-31,-33,]),'STRING':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,110,112,113,115,118,123,],[38,-68,-26,-17,-18,-19,-20,-21,-22,-23,38,38,38,38,38,-39,-41,-57,-58,-59,-60,-61,38,38,-64,-65,-69,-70,-71,-72,-24,38,-43,-44,38,38,38,38,-56,38,38,38,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-40,-14,-73,38,-36,-37,-38,-42,-62,38,38,-34,-32,-66,38,38,38,-67,-35,-9,-31,-33,]),'BOOL':([5,7,10,11,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,110,112,113,115,118,123,],[39,-68,-26,-17,-18,-19,-20,-21,-22,-23,39,39,39,39,39,-39,-41,-57,-58,-59,-60,-61,39,39,-64,-65,-69,-70,-71,-72,-24,39,-43,-44,39,39,39,39,-56,39,39,39,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-40,-14,-73,39,-36,-37,-38,-42,-62,39,39,-34,-32,-66,39,39,39,-67,-35,-9,-31,-33,]),'LBRACKET_S':([5,7,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,75,76,77,85,86,87,88,89,90,91,94,96,97,98,100,101,103,110,112,113,114,115,118,123,],[21,-68,-26,-17,-18,-19,-20,-21,-22,-23,21,49,21,21,21,21,-39,-41,-57,-58,-59,-60,-61,21,21,-64,-65,-69,-70,-71,-72,75,-24,21,-43,-44,21,75,21,21,21,86,21,21,21,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,75,-40,-14,-73,21,-36,-37,-38,-42,-62,21,21,-34,-32,-66,21,21,21,-67,-35,75,-9,-31,-33,]),'COLON':([6,7,20,104,],[40,-68,47,114,]),'ASSIGNMENT':([7,20,70,71,72,73,74,79,99,108,],[-68,48,94,-74,-75,-76,-77,96,110,-78,]),'TIMES':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,57,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,57,-73,-42,-62,-67,-66,-67,]),'DIV':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,58,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,58,-73,-42,-62,-67,-66,-67,]),'PLUS':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,59,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,59,-73,-42,-62,-67,-66,-67,]),'MINUS':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,60,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,60,-73,-42,-62,-67,-66,-67,]),'MOD':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,61,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,61,-73,-42,-62,-67,-66,-67,]),'EQUAL':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,62,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,62,-73,-42,-62,-67,-66,-67,]),'NEQUAL':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,63,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,63,-73,-42,-62,-67,-66,-67,]),'LT':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,64,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,64,-73,-42,-62,-67,-66,-67,]),'LTE':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,65,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,65,-73,-42,-62,-67,-66,-67,]),'GT':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,66,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,66,-73,-42,-62,-67,-66,-67,]),'GTE':([7,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,76,85,90,91,99,100,112,],[-68,-56,67,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,67,-73,-42,-62,-67,-66,-67,]),'SEMICOLON':([7,18,20,25,26,27,28,29,30,31,34,35,36,37,38,39,52,55,69,70,71,72,73,74,76,79,80,85,90,91,99,100,107,108,109,112,115,119,],[-68,41,-56,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,89,-63,93,-74,-75,-76,-77,-40,97,98,-73,-42,-62,-67,-66,117,-78,118,-67,121,123,]),'AND':([7,18,20,25,26,27,28,29,30,31,34,35,36,37,38,39,51,52,53,54,55,68,69,76,80,81,84,85,90,91,99,100,102,107,109,112,119,],[-68,43,-56,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,43,-56,43,43,43,43,43,-40,43,43,43,-73,-42,-62,-67,-66,43,43,43,-67,43,]),'OR':([7,18,20,25,26,27,28,29,30,31,34,35,36,37,38,39,51,52,53,54,55,68,69,76,80,81,84,85,90,91,99,100,102,107,109,112,119,],[-68,44,-56,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,44,-56,44,44,44,44,44,-40,44,44,44,-73,-42,-62,-67,-66,44,44,44,-67,44,]),'RBRACKET_S':([7,25,26,27,28,29,30,31,34,35,36,37,38,39,51,52,69,71,72,73,74,76,81,85,90,91,95,100,102,108,112,],[-68,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,85,-56,-63,-74,-75,-76,-77,-40,99,-73,-42,-62,108,-66,112,-78,-67,]),'ELSE':([7,10,11,12,13,14,15,16,17,25,26,27,28,29,30,31,34,35,36,37,38,39,41,52,53,54,69,76,77,85,87,88,89,90,91,97,98,100,103,112,113,118,123,],[-68,-26,-17,-18,-19,-20,-21,-22,-23,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,-56,-25,-25,-63,-40,-14,-73,103,-37,-38,-42,-62,-34,-32,-66,-25,-67,-35,-31,-33,]),'RBRACKET':([7,10,11,12,13,14,15,16,17,19,25,26,27,28,29,30,31,34,35,36,37,38,39,41,45,46,52,53,54,69,76,77,78,85,87,88,89,90,91,97,98,100,103,112,113,118,123,],[-68,-26,-17,-18,-19,-20,-21,-22,-23,-25,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-24,77,-16,-56,-25,-25,-63,-40,-14,-15,-73,-36,-37,-38,-42,-62,-34,-32,-66,-25,-67,-35,-31,-33,]),'RPAREN':([7,25,26,27,28,29,30,31,34,35,36,37,38,39,50,52,68,69,71,72,73,74,76,82,83,84,85,90,91,92,100,101,105,106,108,111,112,116,120,122,],[-68,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-29,-56,91,-63,-74,-75,-76,-77,-40,100,-28,-30,-73,-42,-62,-12,-66,-29,115,-11,-78,-27,-67,-12,-13,-10,]),'COMMA':([7,25,26,27,28,29,30,31,34,35,36,37,38,39,52,69,71,72,73,74,76,83,84,85,90,91,100,106,108,112,120,],[-68,-39,-41,-57,-58,-59,-60,-61,-64,-65,-69,-70,-71,-72,-56,-63,-74,-75,-76,-77,-40,101,-30,-73,-42,-62,-66,116,-78,-67,-13,]),'TINTEGER':([40,47,75,114,],[71,71,71,71,]),'TFLOAT':([40,47,75,114,],[72,72,72,72,]),'TSTRING':([40,47,75,114,],[73,73,73,73,]),'TBOOL':([40,47,75,114,],[74,74,74,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition_sequence':([0,2,],[1,8,]),'definition':([0,2,],[2,2,]),'function_declaration':([0,2,],[3,3,]),'variable_declaration':([0,2,],[4,4,]),'function_heading':([0,2,],[5,5,]),'identifier':([0,2,5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,92,94,96,101,103,110,116,],[6,6,20,20,52,52,52,52,52,52,52,20,52,52,52,20,20,52,52,104,52,52,52,20,52,104,]),'body':([5,53,54,103,],[9,87,88,113,]),'statement':([5,19,46,53,54,103,],[10,46,46,10,10,10,]),'statement_part':([5,19,46,53,54,103,],[11,11,11,11,11,11,]),'local_variable_declaration':([5,19,46,53,54,103,],[12,12,12,12,12,12,]),'assignment_statement':([5,19,46,53,54,103,],[13,13,13,13,13,13,]),'array_def':([5,19,46,53,54,103,],[14,14,14,14,14,14,]),'if_statement':([5,19,46,53,54,103,],[15,15,15,15,15,15,]),'while_statement':([5,19,46,53,54,103,],[16,16,16,16,16,16,]),'return_statement':([5,19,46,53,54,103,],[17,17,17,17,17,17,]),'expression':([5,19,21,22,23,24,32,33,46,48,49,50,53,54,86,94,96,101,103,110,],[18,18,51,53,54,55,68,69,18,80,81,84,18,18,102,107,109,84,18,119,]),'expression_m':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,86,94,96,101,103,110,],[25,25,25,25,25,25,25,25,76,25,25,25,25,25,25,25,25,25,25,25,25,]),'expression_e':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,90,26,26,26,26,26,26,]),'integer':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'float':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'string':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'bool':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'array':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'function_call':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'array_call':([5,19,21,22,23,24,32,33,42,46,48,49,50,53,54,56,86,94,96,101,103,110,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'and_or':([18,51,53,54,55,68,69,80,81,84,102,107,109,119,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'statement_sequence':([19,46,],[45,78,]),'sign':([25,76,],[56,56,]),'type':([40,47,75,114,],[70,79,95,120,]),'param_list':([50,101,],[82,111,]),'param':([50,101,],[83,83,]),'parameter_list':([92,116,],[105,122,]),'parameter':([92,116,],[106,106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> definition_sequence","S'",1,None,None,None),
  ('definition_sequence -> definition definition_sequence','definition_sequence',2,'p_definition_sequence','rules.py',12),
  ('definition_sequence -> definition','definition_sequence',1,'p_definition_sequence','rules.py',13),
  ('definition -> function_declaration','definition',1,'p_definition','rules.py',20),
  ('definition -> variable_declaration','definition',1,'p_definition','rules.py',21),
  ('variable_declaration -> identifier COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','rules.py',25),
  ('variable_declaration -> identifier COLON type ASSIGNMENT expression SEMICOLON','variable_declaration',6,'p_variable_declaration','rules.py',26),
  ('function_declaration -> function_heading body','function_declaration',2,'p_function_declaration','rules.py',33),
  ('function_declaration -> identifier COLON type LPAREN parameter_list RPAREN SEMICOLON','function_declaration',7,'p_function_declaration','rules.py',34),
  ('function_heading -> identifier COLON type LPAREN parameter_list RPAREN','function_heading',6,'p_function_heading','rules.py',45),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','rules.py',52),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','rules.py',53),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','rules.py',54),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','rules.py',61),
  ('statement_part -> LBRACKET statement_sequence RBRACKET','statement_part',3,'p_statement_part','rules.py',65),
  ('statement_sequence -> statement statement_sequence','statement_sequence',2,'p_statement_sequence','rules.py',69),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','rules.py',70),
  ('statement -> statement_part','statement',1,'p_statement','rules.py',77),
  ('statement -> local_variable_declaration','statement',1,'p_statement','rules.py',78),
  ('statement -> assignment_statement','statement',1,'p_statement','rules.py',79),
  ('statement -> array_def','statement',1,'p_statement','rules.py',80),
  ('statement -> if_statement','statement',1,'p_statement','rules.py',81),
  ('statement -> while_statement','statement',1,'p_statement','rules.py',82),
  ('statement -> return_statement','statement',1,'p_statement','rules.py',83),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','rules.py',84),
  ('statement -> <empty>','statement',0,'p_statement','rules.py',85),
  ('body -> statement','body',1,'p_body','rules.py',90),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','rules.py',101),
  ('param_list -> param','param_list',1,'p_param_list','rules.py',102),
  ('param_list -> <empty>','param_list',0,'p_param_list','rules.py',103),
  ('param -> expression','param',1,'p_param','rules.py',110),
  ('local_variable_declaration -> identifier COLON type ASSIGNMENT expression SEMICOLON','local_variable_declaration',6,'p_local_variable_declaration','rules.py',114),
  ('assignment_statement -> identifier ASSIGNMENT expression SEMICOLON','assignment_statement',4,'p_assignment_statement','rules.py',118),
  ('assignment_statement -> identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON','assignment_statement',7,'p_assignment_statement','rules.py',119),
  ('array_def -> identifier COLON type SEMICOLON','array_def',4,'p_array_def','rules.py',126),
  ('if_statement -> IF expression body ELSE body','if_statement',5,'p_if_statement','rules.py',130),
  ('if_statement -> IF expression body','if_statement',3,'p_if_statement','rules.py',131),
  ('while_statement -> WHILE expression body','while_statement',3,'p_while_statement','rules.py',138),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','rules.py',142),
  ('expression -> expression_m','expression',1,'p_expression','rules.py',146),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','rules.py',147),
  ('expression_m -> expression_e','expression_m',1,'p_expression_m','rules.py',154),
  ('expression_m -> expression_m sign expression_e','expression_m',3,'p_expression_m','rules.py',155),
  ('and_or -> AND','and_or',1,'p_and_or','rules.py',162),
  ('and_or -> OR','and_or',1,'p_and_or','rules.py',163),
  ('sign -> TIMES','sign',1,'p_sign','rules.py',167),
  ('sign -> DIV','sign',1,'p_sign','rules.py',168),
  ('sign -> PLUS','sign',1,'p_sign','rules.py',169),
  ('sign -> MINUS','sign',1,'p_sign','rules.py',170),
  ('sign -> MOD','sign',1,'p_sign','rules.py',171),
  ('sign -> EQUAL','sign',1,'p_sign','rules.py',172),
  ('sign -> NEQUAL','sign',1,'p_sign','rules.py',173),
  ('sign -> LT','sign',1,'p_sign','rules.py',174),
  ('sign -> LTE','sign',1,'p_sign','rules.py',175),
  ('sign -> GT','sign',1,'p_sign','rules.py',176),
  ('sign -> GTE','sign',1,'p_sign','rules.py',177),
  ('expression_e -> identifier','expression_e',1,'p_expression_e','rules.py',181),
  ('expression_e -> integer','expression_e',1,'p_expression_e','rules.py',182),
  ('expression_e -> float','expression_e',1,'p_expression_e','rules.py',183),
  ('expression_e -> string','expression_e',1,'p_expression_e','rules.py',184),
  ('expression_e -> bool','expression_e',1,'p_expression_e','rules.py',185),
  ('expression_e -> array','expression_e',1,'p_expression_e','rules.py',186),
  ('expression_e -> LPAREN expression RPAREN','expression_e',3,'p_expression_e','rules.py',187),
  ('expression_e -> NOT expression','expression_e',2,'p_expression_e','rules.py',188),
  ('expression_e -> function_call','expression_e',1,'p_expression_e','rules.py',189),
  ('expression_e -> array_call','expression_e',1,'p_expression_e','rules.py',190),
  ('function_call -> identifier LPAREN param_list RPAREN','function_call',4,'p_function_call','rules.py',199),
  ('array_call -> identifier LBRACKET_S expression RBRACKET_S','array_call',4,'p_array_call','rules.py',206),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','rules.py',210),
  ('integer -> INTEGER','integer',1,'p_integer','rules.py',218),
  ('float -> FLOAT','float',1,'p_float','rules.py',222),
  ('string -> STRING','string',1,'p_str','rules.py',226),
  ('bool -> BOOL','bool',1,'p_bool','rules.py',230),
  ('array -> LBRACKET_S expression RBRACKET_S','array',3,'p_array','rules.py',234),
  ('type -> TINTEGER','type',1,'p_type','rules.py',238),
  ('type -> TFLOAT','type',1,'p_type','rules.py',239),
  ('type -> TSTRING','type',1,'p_type','rules.py',240),
  ('type -> TBOOL','type',1,'p_type','rules.py',241),
  ('type -> LBRACKET_S type RBRACKET_S','type',3,'p_type','rules.py',242),
]
