
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVMODleftEQUALNEQUALLTELTGTGTEleftANDORAND ARRAY ASSIGNMENT BOOL COLON COMMA COMMENT DIV ELSE EQUAL FLOAT GT GTE IDENTIFIER IF INTEGER LBRACKET LBRACKET_S LPAREN LT LTE MINUS MOD NEQUAL NOT OR PLUS RBRACKET RBRACKET_S RETURN RPAREN SEMICOLON STRING TBOOL TFLOAT TIMES TINTEGER TSTRING TVOID VOID WHILE definition_sequence : definition definition_sequence\n\t| definition  definition : function_declaration\n\t| variable_declaration  variable_declaration : identifier COLON type SEMICOLON\n\t| identifier COLON type ASSIGNMENT expression SEMICOLON  function_declaration : function_heading body \n\t| identifier COLON type LPAREN parameter_list RPAREN SEMICOLON  function_heading : identifier COLON type LPAREN parameter_list RPAREN  parameter_list : parameter COMMA parameter_list\n\t| parameter \n\t|  parameter : identifier COLON type  statement_part : LBRACKET statement_sequence RBRACKET  statement_sequence : statement statement_sequence\n\t| statement  statement : statement_part\n\t | assignment_statement\n\t | array_def\n\t | if_statement\n\t | while_statement\n\t | return_statement\n\t | function_call\n\t | array_call\n     | expression SEMICOLON\n\t |  body : statement  function_call : identifier LPAREN param_list RPAREN SEMICOLON  array_call : identifier LBRACKET_S expression RBRACKET_S SEMICOLON  param_list : param COMMA param_list\n\t | param \n\t |  param : expression  assignment_statement : identifier COLON type ASSIGNMENT expression SEMICOLON \n\t| identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON  array_def : identifier COLON type SEMICOLON  if_statement : IF expression body ELSE body\n\t| IF expression body  while_statement : WHILE expression body  return_statement : RETURN expression SEMICOLON  expression : expression_m\n\t| expression and_or expression_m  expression_m : expression_e\n\t| expression_m sign expression_e  and_or : AND\n\t| OR  sign : TIMES \n\t| DIV\n\t| PLUS\n\t| MINUS\n\t| MOD\n\t| EQUAL\n\t| NEQUAL\n\t| LT\n\t| LTE\n\t| GT\n\t| GTE  expression_e : identifier\n\t| integer\n\t| float\n\t| string\n\t| bool\n\t| array\n\t| LPAREN expression RPAREN \n\t| NOT expression\n    | function_call_inline \n\t| array_call_inline  function_call_inline : identifier LPAREN param_list RPAREN  array_call_inline : identifier LBRACKET_S expression RBRACKET_S  identifier : IDENTIFIER  integer : INTEGER  float : FLOAT  string : STRING  bool : BOOL  array : LBRACKET_S expression RBRACKET_S  type : TINTEGER\n\t| TFLOAT\n\t| TSTRING \n\t| TBOOL \n\t| LBRACKET_S type RBRACKET_S '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,84,85,86,87,88,89,90,91,92,93,94,96,97,100,103,110,111,112,114,115,116,118,119,120,121,124,126,],[7,7,-3,-4,7,-70,-7,-27,-17,-18,-19,-20,-21,-22,-23,-24,7,7,7,7,7,7,-41,-43,-59,-60,-61,-62,-63,7,-66,-67,-71,-72,-73,-74,-25,7,-45,-46,7,7,7,-58,7,7,7,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,-42,-14,-75,7,7,-38,-39,-40,-64,-44,7,-5,7,7,-36,7,7,7,-29,-28,-68,-69,-37,-9,7,-6,-34,-8,-35,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,27,28,29,30,31,32,33,35,36,37,38,39,40,42,52,53,54,69,76,77,84,87,88,89,90,91,93,97,103,111,112,114,115,116,118,120,121,124,126,],[0,-2,-3,-4,-26,-70,-1,-7,-27,-17,-18,-19,-20,-21,-22,-23,-24,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,-58,-26,-26,-65,-42,-14,-75,-38,-39,-40,-64,-44,-5,-36,-26,-29,-28,-68,-69,-37,-9,-6,-34,-8,-35,]),'LBRACKET':([5,7,10,11,12,13,14,15,16,17,18,20,27,28,29,30,31,32,33,35,36,37,38,39,40,42,47,52,53,54,69,76,77,84,87,88,89,90,91,97,103,111,112,114,115,116,118,121,126,],[20,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,20,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,20,-58,20,20,-65,-42,-14,-75,-38,-39,-40,-64,-44,-36,20,-29,-28,-68,-69,-37,-9,-34,-35,]),'IF':([5,7,10,11,12,13,14,15,16,17,18,20,27,28,29,30,31,32,33,35,36,37,38,39,40,42,47,52,53,54,69,76,77,84,87,88,89,90,91,97,103,111,112,114,115,116,118,121,126,],[23,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,23,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,23,-58,23,23,-65,-42,-14,-75,-38,-39,-40,-64,-44,-36,23,-29,-28,-68,-69,-37,-9,-34,-35,]),'WHILE':([5,7,10,11,12,13,14,15,16,17,18,20,27,28,29,30,31,32,33,35,36,37,38,39,40,42,47,52,53,54,69,76,77,84,87,88,89,90,91,97,103,111,112,114,115,116,118,121,126,],[24,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,24,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,24,-58,24,24,-65,-42,-14,-75,-38,-39,-40,-64,-44,-36,24,-29,-28,-68,-69,-37,-9,-34,-35,]),'RETURN':([5,7,10,11,12,13,14,15,16,17,18,20,27,28,29,30,31,32,33,35,36,37,38,39,40,42,47,52,53,54,69,76,77,84,87,88,89,90,91,97,103,111,112,114,115,116,118,121,126,],[25,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,25,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,25,-58,25,25,-65,-42,-14,-75,-38,-39,-40,-64,-44,-36,25,-29,-28,-68,-69,-37,-9,-34,-35,]),'LPAREN':([5,7,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,108,110,111,112,114,115,116,118,121,126,],[26,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,26,50,26,26,26,26,26,-41,-43,-59,-60,-61,-62,-63,26,-66,-67,-71,-72,-73,-74,-25,26,-45,-46,26,26,26,85,26,26,26,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,92,-76,-77,-78,-79,-42,-14,-75,26,26,-38,-39,-40,-64,-44,26,26,-36,26,26,-80,26,-29,-28,-68,-69,-37,-9,-34,-35,]),'NOT':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,110,111,112,114,115,116,118,121,126,],[34,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,34,34,34,34,34,34,-41,-43,-59,-60,-61,-62,-63,34,-66,-67,-71,-72,-73,-74,-25,34,-45,-46,34,34,34,-58,34,34,34,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,-42,-14,-75,34,34,-38,-39,-40,-64,-44,34,34,-36,34,34,34,-29,-28,-68,-69,-37,-9,-34,-35,]),'INTEGER':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,110,111,112,114,115,116,118,121,126,],[37,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,37,37,37,37,37,37,-41,-43,-59,-60,-61,-62,-63,37,-66,-67,-71,-72,-73,-74,-25,37,-45,-46,37,37,37,-58,37,37,37,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,-42,-14,-75,37,37,-38,-39,-40,-64,-44,37,37,-36,37,37,37,-29,-28,-68,-69,-37,-9,-34,-35,]),'FLOAT':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,110,111,112,114,115,116,118,121,126,],[38,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,38,38,38,38,38,38,-41,-43,-59,-60,-61,-62,-63,38,-66,-67,-71,-72,-73,-74,-25,38,-45,-46,38,38,38,-58,38,38,38,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,-42,-14,-75,38,38,-38,-39,-40,-64,-44,38,38,-36,38,38,38,-29,-28,-68,-69,-37,-9,-34,-35,]),'STRING':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,110,111,112,114,115,116,118,121,126,],[39,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,39,39,39,39,39,39,-41,-43,-59,-60,-61,-62,-63,39,-66,-67,-71,-72,-73,-74,-25,39,-45,-46,39,39,39,-58,39,39,39,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,-42,-14,-75,39,39,-38,-39,-40,-64,-44,39,39,-36,39,39,39,-29,-28,-68,-69,-37,-9,-34,-35,]),'BOOL':([5,7,10,11,12,13,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,110,111,112,114,115,116,118,121,126,],[40,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,40,40,40,40,40,40,-41,-43,-59,-60,-61,-62,-63,40,-66,-67,-71,-72,-73,-74,-25,40,-45,-46,40,40,40,-58,40,40,40,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,-42,-14,-75,40,40,-38,-39,-40,-64,-44,40,40,-36,40,40,40,-29,-28,-68,-69,-37,-9,-34,-35,]),'LBRACKET_S':([5,7,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,75,76,77,84,85,86,87,88,89,90,91,94,96,97,100,103,110,111,112,114,115,116,117,118,121,126,],[22,-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,22,49,22,22,22,22,22,-41,-43,-59,-60,-61,-62,-63,22,-66,-67,-71,-72,-73,-74,75,-25,22,-45,-46,22,75,22,22,86,22,22,22,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-65,75,-42,-14,-75,22,22,-38,-39,-40,-64,-44,22,22,-36,22,22,22,-29,-28,-68,-69,-37,75,-9,-34,-35,]),'COLON':([6,7,21,104,],[41,-70,48,117,]),'TIMES':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,58,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,58,-75,-64,-44,-69,-68,-68,-69,]),'DIV':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,59,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,59,-75,-64,-44,-69,-68,-68,-69,]),'PLUS':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,60,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,60,-75,-64,-44,-69,-68,-68,-69,]),'MINUS':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,61,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,61,-75,-64,-44,-69,-68,-68,-69,]),'MOD':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,62,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,62,-75,-64,-44,-69,-68,-68,-69,]),'EQUAL':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,63,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,63,-75,-64,-44,-69,-68,-68,-69,]),'NEQUAL':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,64,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,64,-75,-64,-44,-69,-68,-68,-69,]),'LT':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,65,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,65,-75,-64,-44,-69,-68,-68,-69,]),'LTE':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,66,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,66,-75,-64,-44,-69,-68,-68,-69,]),'GT':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,67,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,67,-75,-64,-44,-69,-68,-68,-69,]),'GTE':([7,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,76,84,90,91,98,99,114,115,],[-70,-58,68,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,68,-75,-64,-44,-69,-68,-68,-69,]),'SEMICOLON':([7,19,21,27,28,29,30,31,32,33,35,36,37,38,39,40,52,55,69,70,71,72,73,74,76,79,84,90,91,98,99,107,108,109,114,115,118,122,],[-70,42,-58,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,89,-65,93,-76,-77,-78,-79,-42,97,-75,-64,-44,111,112,120,-80,121,-68,-69,124,126,]),'AND':([7,19,21,27,28,29,30,31,32,33,35,36,37,38,39,40,51,52,53,54,55,56,69,76,80,83,84,90,91,98,99,102,107,109,114,115,122,],[-70,44,-58,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,44,-58,44,44,44,44,44,-42,44,44,-75,-64,-44,-69,-68,44,44,44,-68,-69,44,]),'OR':([7,19,21,27,28,29,30,31,32,33,35,36,37,38,39,40,51,52,53,54,55,56,69,76,80,83,84,90,91,98,99,102,107,109,114,115,122,],[-70,45,-58,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,45,-58,45,45,45,45,45,-42,45,45,-75,-64,-44,-69,-68,45,45,45,-68,-69,45,]),'RBRACKET_S':([7,27,28,29,30,31,32,33,35,36,37,38,39,40,51,52,69,71,72,73,74,76,80,84,90,91,95,102,108,114,115,],[-70,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,84,-58,-65,-76,-77,-78,-79,-42,98,-75,-64,-44,108,115,-80,-68,-69,]),'ELSE':([7,10,11,12,13,14,15,16,17,18,27,28,29,30,31,32,33,35,36,37,38,39,40,42,52,53,54,69,76,77,84,87,88,89,90,91,97,103,111,112,114,115,116,121,126,],[-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,-58,-26,-26,-65,-42,-14,-75,103,-39,-40,-64,-44,-36,-26,-29,-28,-68,-69,-37,-34,-35,]),'RBRACKET':([7,10,11,12,13,14,15,16,17,18,20,27,28,29,30,31,32,33,35,36,37,38,39,40,42,46,47,52,53,54,69,76,77,78,84,87,88,89,90,91,97,103,111,112,114,115,116,121,126,],[-70,-27,-17,-18,-19,-20,-21,-22,-23,-24,-26,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-25,77,-16,-58,-26,-26,-65,-42,-14,-15,-75,-38,-39,-40,-64,-44,-36,-26,-29,-28,-68,-69,-37,-34,-35,]),'RPAREN':([7,27,28,29,30,31,32,33,35,36,37,38,39,40,50,52,56,69,71,72,73,74,76,81,82,83,84,85,90,91,92,100,101,105,106,108,113,114,115,119,123,125,],[-70,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-32,-58,90,-65,-76,-77,-78,-79,-42,99,-31,-33,-75,-32,-64,-44,-12,-32,114,118,-11,-80,-30,-68,-69,-12,-13,-10,]),'COMMA':([7,27,28,29,30,31,32,33,35,36,37,38,39,40,52,69,71,72,73,74,76,82,83,84,90,91,106,108,114,115,123,],[-70,-41,-43,-59,-60,-61,-62,-63,-66,-67,-71,-72,-73,-74,-58,-65,-76,-77,-78,-79,-42,100,-33,-75,-64,-44,119,-80,-68,-69,-13,]),'TINTEGER':([41,48,75,117,],[71,71,71,71,]),'TFLOAT':([41,48,75,117,],[72,72,72,72,]),'TSTRING':([41,48,75,117,],[73,73,73,73,]),'TBOOL':([41,48,75,117,],[74,74,74,74,]),'ASSIGNMENT':([70,71,72,73,74,79,98,108,],[94,-76,-77,-78,-79,96,110,-80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'definition_sequence':([0,2,],[1,8,]),'definition':([0,2,],[2,2,]),'function_declaration':([0,2,],[3,3,]),'variable_declaration':([0,2,],[4,4,]),'function_heading':([0,2,],[5,5,]),'identifier':([0,2,5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,92,94,96,100,103,110,119,],[6,6,21,21,52,52,52,52,52,52,52,21,52,52,21,21,52,52,52,104,52,52,52,21,52,104,]),'body':([5,53,54,103,],[9,87,88,116,]),'statement':([5,20,47,53,54,103,],[10,47,47,10,10,10,]),'statement_part':([5,20,47,53,54,103,],[11,11,11,11,11,11,]),'assignment_statement':([5,20,47,53,54,103,],[12,12,12,12,12,12,]),'array_def':([5,20,47,53,54,103,],[13,13,13,13,13,13,]),'if_statement':([5,20,47,53,54,103,],[14,14,14,14,14,14,]),'while_statement':([5,20,47,53,54,103,],[15,15,15,15,15,15,]),'return_statement':([5,20,47,53,54,103,],[16,16,16,16,16,16,]),'function_call':([5,20,47,53,54,103,],[17,17,17,17,17,17,]),'array_call':([5,20,47,53,54,103,],[18,18,18,18,18,18,]),'expression':([5,20,22,23,24,25,26,34,47,49,50,53,54,85,86,94,96,100,103,110,],[19,19,51,53,54,55,56,69,19,80,83,19,19,83,102,107,109,83,19,122,]),'expression_m':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,85,86,94,96,100,103,110,],[27,27,27,27,27,27,27,27,76,27,27,27,27,27,27,27,27,27,27,27,27,]),'expression_e':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,91,28,28,28,28,28,28,28,]),'integer':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'float':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'string':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'bool':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'array':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'function_call_inline':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'array_call_inline':([5,20,22,23,24,25,26,34,43,47,49,50,53,54,57,85,86,94,96,100,103,110,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'and_or':([19,51,53,54,55,56,69,80,83,102,107,109,122,],[43,43,43,43,43,43,43,43,43,43,43,43,43,]),'statement_sequence':([20,47,],[46,78,]),'sign':([27,76,],[57,57,]),'type':([41,48,75,117,],[70,79,95,123,]),'param_list':([50,85,100,],[81,101,113,]),'param':([50,85,100,],[82,82,82,]),'parameter_list':([92,119,],[105,125,]),'parameter':([92,119,],[106,106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> definition_sequence","S'",1,None,None,None),
  ('definition_sequence -> definition definition_sequence','definition_sequence',2,'p_definition_sequence','rules.py',12),
  ('definition_sequence -> definition','definition_sequence',1,'p_definition_sequence','rules.py',13),
  ('definition -> function_declaration','definition',1,'p_definition','rules.py',20),
  ('definition -> variable_declaration','definition',1,'p_definition','rules.py',21),
  ('variable_declaration -> identifier COLON type SEMICOLON','variable_declaration',4,'p_variable_declaration','rules.py',25),
  ('variable_declaration -> identifier COLON type ASSIGNMENT expression SEMICOLON','variable_declaration',6,'p_variable_declaration','rules.py',26),
  ('function_declaration -> function_heading body','function_declaration',2,'p_function_declaration','rules.py',33),
  ('function_declaration -> identifier COLON type LPAREN parameter_list RPAREN SEMICOLON','function_declaration',7,'p_function_declaration','rules.py',34),
  ('function_heading -> identifier COLON type LPAREN parameter_list RPAREN','function_heading',6,'p_function_heading','rules.py',45),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','rules.py',52),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','rules.py',53),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','rules.py',54),
  ('parameter -> identifier COLON type','parameter',3,'p_parameter','rules.py',61),
  ('statement_part -> LBRACKET statement_sequence RBRACKET','statement_part',3,'p_statement_part','rules.py',65),
  ('statement_sequence -> statement statement_sequence','statement_sequence',2,'p_statement_sequence','rules.py',69),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','rules.py',70),
  ('statement -> statement_part','statement',1,'p_statement','rules.py',77),
  ('statement -> assignment_statement','statement',1,'p_statement','rules.py',78),
  ('statement -> array_def','statement',1,'p_statement','rules.py',79),
  ('statement -> if_statement','statement',1,'p_statement','rules.py',80),
  ('statement -> while_statement','statement',1,'p_statement','rules.py',81),
  ('statement -> return_statement','statement',1,'p_statement','rules.py',82),
  ('statement -> function_call','statement',1,'p_statement','rules.py',83),
  ('statement -> array_call','statement',1,'p_statement','rules.py',84),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','rules.py',85),
  ('statement -> <empty>','statement',0,'p_statement','rules.py',86),
  ('body -> statement','body',1,'p_body','rules.py',91),
  ('function_call -> identifier LPAREN param_list RPAREN SEMICOLON','function_call',5,'p_function_call','rules.py',95),
  ('array_call -> identifier LBRACKET_S expression RBRACKET_S SEMICOLON','array_call',5,'p_array_call','rules.py',102),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','rules.py',106),
  ('param_list -> param','param_list',1,'p_param_list','rules.py',107),
  ('param_list -> <empty>','param_list',0,'p_param_list','rules.py',108),
  ('param -> expression','param',1,'p_param','rules.py',115),
  ('assignment_statement -> identifier COLON type ASSIGNMENT expression SEMICOLON','assignment_statement',6,'p_assignment_statement','rules.py',119),
  ('assignment_statement -> identifier LBRACKET_S expression RBRACKET_S ASSIGNMENT expression SEMICOLON','assignment_statement',7,'p_assignment_statement','rules.py',120),
  ('array_def -> identifier COLON type SEMICOLON','array_def',4,'p_array_decl','rules.py',127),
  ('if_statement -> IF expression body ELSE body','if_statement',5,'p_if_statement','rules.py',131),
  ('if_statement -> IF expression body','if_statement',3,'p_if_statement','rules.py',132),
  ('while_statement -> WHILE expression body','while_statement',3,'p_while_statement','rules.py',139),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','rules.py',143),
  ('expression -> expression_m','expression',1,'p_expression','rules.py',147),
  ('expression -> expression and_or expression_m','expression',3,'p_expression','rules.py',148),
  ('expression_m -> expression_e','expression_m',1,'p_expression_m','rules.py',155),
  ('expression_m -> expression_m sign expression_e','expression_m',3,'p_expression_m','rules.py',156),
  ('and_or -> AND','and_or',1,'p_and_or','rules.py',163),
  ('and_or -> OR','and_or',1,'p_and_or','rules.py',164),
  ('sign -> TIMES','sign',1,'p_sign','rules.py',168),
  ('sign -> DIV','sign',1,'p_sign','rules.py',169),
  ('sign -> PLUS','sign',1,'p_sign','rules.py',170),
  ('sign -> MINUS','sign',1,'p_sign','rules.py',171),
  ('sign -> MOD','sign',1,'p_sign','rules.py',172),
  ('sign -> EQUAL','sign',1,'p_sign','rules.py',173),
  ('sign -> NEQUAL','sign',1,'p_sign','rules.py',174),
  ('sign -> LT','sign',1,'p_sign','rules.py',175),
  ('sign -> LTE','sign',1,'p_sign','rules.py',176),
  ('sign -> GT','sign',1,'p_sign','rules.py',177),
  ('sign -> GTE','sign',1,'p_sign','rules.py',178),
  ('expression_e -> identifier','expression_e',1,'p_expression_e','rules.py',182),
  ('expression_e -> integer','expression_e',1,'p_expression_e','rules.py',183),
  ('expression_e -> float','expression_e',1,'p_expression_e','rules.py',184),
  ('expression_e -> string','expression_e',1,'p_expression_e','rules.py',185),
  ('expression_e -> bool','expression_e',1,'p_expression_e','rules.py',186),
  ('expression_e -> array','expression_e',1,'p_expression_e','rules.py',187),
  ('expression_e -> LPAREN expression RPAREN','expression_e',3,'p_expression_e','rules.py',188),
  ('expression_e -> NOT expression','expression_e',2,'p_expression_e','rules.py',189),
  ('expression_e -> function_call_inline','expression_e',1,'p_expression_e','rules.py',190),
  ('expression_e -> array_call_inline','expression_e',1,'p_expression_e','rules.py',191),
  ('function_call_inline -> identifier LPAREN param_list RPAREN','function_call_inline',4,'p_function_call_inline','rules.py',200),
  ('array_call_inline -> identifier LBRACKET_S expression RBRACKET_S','array_call_inline',4,'p_array_call_inline','rules.py',207),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','rules.py',211),
  ('integer -> INTEGER','integer',1,'p_integer','rules.py',219),
  ('float -> FLOAT','float',1,'p_float','rules.py',223),
  ('string -> STRING','string',1,'p_str','rules.py',227),
  ('bool -> BOOL','bool',1,'p_bool','rules.py',231),
  ('array -> LBRACKET_S expression RBRACKET_S','array',3,'p_array','rules.py',235),
  ('type -> TINTEGER','type',1,'p_type','rules.py',239),
  ('type -> TFLOAT','type',1,'p_type','rules.py',240),
  ('type -> TSTRING','type',1,'p_type','rules.py',241),
  ('type -> TBOOL','type',1,'p_type','rules.py',242),
  ('type -> LBRACKET_S type RBRACKET_S','type',3,'p_type','rules.py',243),
]
